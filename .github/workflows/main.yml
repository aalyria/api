# Copyright 2023 Aalyria Technologies, Inc., and its affiliates.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Bazel

# Needed for creating releases
permissions:
  contents: write

on:
  pull_request:
    branches: [main]

  push: {}
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      create_release:
        description: "Create GitHub release"
        type: boolean
        default: false
      version:
        description: "Release version"
        required: false
        type: string
      upload_to_registry:
        description: "Upload to package registry"
        type: boolean
        default: false

jobs:
  # FIXME
  # build-and-test:
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/cache@v4
  #       with:
  #         path: |
  #           ~/.cache/bazelisk
  #           ~/.cache/bazel
  #         key: bazel-${{ hashFiles('common.bazelrc', '.bazelrc', '.bazelversion', 'WORKSPACE', 'MODULE.bazel', 'requirements.txt') }}
  #         restore-keys: bazel-
  #     - run: bazelisk test //...

  build-and-upload-tools:
    # FIXME
    # needs: [build-and-test]
    strategy:
      matrix:
        # Only the go_binary targets support cross-compilation at the moment:
        target:
          - //agent/cmd/agent
          - //tools/nbictl/cmd/nbictl
        # FIXME
        # os: [linux, windows, darwin]
        # arch: [amd64, arm64]
        os: [linux]
        arch: [amd64]

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/bazelisk
            ~/.cache/bazel
          key: bazel-${{ hashFiles('common.bazelrc', '.bazelrc', '.bazelversion', 'WORKSPACE', 'MODULE.bazel', 'requirements.txt') }}
          restore-keys: bazel-
      - run: bazel/tools/update_version_bzl.sh version.bzl
      - run: bazelisk build --stamp "--platforms=@rules_go//go/toolchain:${{ matrix.os }}_${{ matrix.arch }}" "${{ matrix.target }}"

      - name: Package nbictl binary
        if: ${{ matrix.target == '//tools/nbictl/cmd/nbictl' && matrix.os != 'windows' }}
        run: |
            zip -j nbictl-${{ matrix.os }}-${{ matrix.arch }}.zip bazel-bin/tools/nbictl/cmd/nbictl/nbictl_/nbictl

      - name: Package nbictl binary - Windows
        if: ${{ matrix.target == '//tools/nbictl/cmd/nbictl' && matrix.os == 'windows' }}
        run: |
            zip -j nbictl-${{ matrix.os }}-${{ matrix.arch }}.zip bazel-bin/tools/nbictl/cmd/nbictl/nbictl_/nbictl.exe

      - name: Package agent binary
        if: ${{ matrix.target == '//agent/cmd/agent' && matrix.os != 'windows' }}
        run: |
            zip -j agent-${{ matrix.os }}-${{ matrix.arch }}.zip bazel-bin/agent/cmd/agent/agent_/agent

      - name: Package agent binary - Windows
        if: ${{ matrix.target == '//agent/cmd/agent' && matrix.os == 'windows' }}
        run: |
            zip -j agent-${{ matrix.os }}-${{ matrix.arch }}.zip bazel-bin/agent/cmd/agent/agent_/agent.exe

      - name: Upload nbictl binary
        uses: actions/upload-artifact@v4
        if: ${{ matrix.target == '//tools/nbictl/cmd/nbictl' }}
        with:
          name: nbictl-${{ matrix.os }}-${{ matrix.arch }}
          path: nbictl-${{ matrix.os }}-${{ matrix.arch }}.zip
      - name: Upload agent binary
        uses: actions/upload-artifact@v4
        if: ${{ matrix.target == '//agent/cmd/agent' && matrix.os != 'windows' }}
        with:
          name: agent-${{ matrix.os }}-${{ matrix.arch }}
          path: agent-${{ matrix.os }}-${{ matrix.arch }}.zip
  
  # FIXME
  # build-and-upload-docs:
  #   needs: [build-and-test]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/cache@v4
  #       with:
  #         path: |
  #           ~/.cache/bazelisk
  #           ~/.cache/bazel
  #         key: bazel-${{ hashFiles('common.bazelrc', '.bazelrc', '.bazelversion', 'WORKSPACE', 'MODULE.bazel', 'requirements.txt') }}
  #         restore-keys: bazel-
  #     - run: bazelisk build "//api:api.html"
  #     - name: Upload API docs
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: api.html
  #         path: |
  #           bazel-bin/api/api.html/api.html

  create-release:
    needs: [build-and-upload-tools]
    runs-on: ubuntu-latest
    # FIXME
    # if: |
    #   github.event_name == 'workflow_dispatch' &&
    #   inputs.create_release == true

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      # FIXME
      - name: Show artifact structure
        run: |
          ls -alR
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          # FIXME
          # tag_name: ${{ inputs.version }}
          # name: FIXME Release ${{ inputs.version }}
          tag_name: FIXME-test-release-${{ github.ref_name }}
          name: FIXME Release ${{ github.ref_name }}
          draft: true
          files: |
            nbictl-*.zip
            agent-*.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
