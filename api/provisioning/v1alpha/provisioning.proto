// Copyright (c) Aalyria Technologies, Inc., and its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package aalyria.spacetime.api.provisioning.v1alpha;

import "api/provisioning/v1alpha/p2p_sr_te_policy_request.proto";
import "api/provisioning/v1alpha/te.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/type/interval.proto";


option java_package = "com.aalyria.spacetime.api.provisioning.v1alpha";
option go_package = "aalyria.com/spacetime/api/provisioning/v1alpha";

// The Provisioning API is the primary interface whereby requests are
// made of Spacetime.
//
// Each type of provisioning request has its own set of methods.
service Provisioning {
  // Managing ServiceProvisioningRequests.

  // Registers the provided ServiceProvisioningRequest, subject to the
  // constraint that the request's ID is non-empty and does not collide
  // with any other registory request.
  //
  // Additional checks may be performed, including validating the
  // existence of any NMTS Model API Entity IDs referenced by the request.
  rpc CreateServiceProvisioningRequest(CreateServiceProvisioningRequestRequest)
  returns (google.protobuf.Empty) {
    option deprecated = true;
  }
  // Updates a previously-registered ServiceProvisioningRequest.
  rpc UpdateServiceProvisioningRequest(UpdateServiceProvisioningRequestRequest)
  returns (google.protobuf.Empty) {
    option deprecated = true;
  }
  // Delete the ServiceProvisioningRequest matching the ID given.
  rpc DeleteServiceProvisioningRequest(DeleteServiceProvisioningRequestRequest)
  returns (google.protobuf.Empty) {
    option deprecated = true;
  }
  // Retrieve the ServiceProvisioningRequest matching the ID given.
  rpc GetServiceProvisioningRequest(GetServiceProvisioningRequestRequest)
  returns (ServiceProvisioningRequest) {
    option deprecated = true;
  }
  // List all registered ServiceProvisioningRequests.
  rpc ListServiceProvisioningRequests(ListServiceProvisioningRequestsRequest)
  returns (ListServiceProvisioningRequestsResponse) {
    option deprecated = true;
  }

  // P2P SR-TE Policy provisioning.
  //
  // RFC 9522 S5.1.1.3; RFC 9256 SR Policy.
  //
  // Manage resources under `p2pSrTePolicy/{policy_id}`.
  rpc GetP2pSrTePolicy(GetP2pSrTePolicyRequest) returns (P2pSrTePolicy) {}
  rpc ListP2pSrTePolicy(ListP2pSrTePoliciesRequest) returns (ListP2pSrTePoliciesResponse) {}
  rpc CreateP2pSrTePolicy(CreateP2pSrTePolicyRequest) returns (P2pSrTePolicy) {}
  rpc UpdateP2pSrTePolicy(UpdateP2pSrTePolicyRequest) returns (P2pSrTePolicy) {}
  rpc DeleteP2pSrTePolicy(DeleteP2pSrTePolicyRequest) returns (google.protobuf.Empty) {}

  // P2P SR TE Policy dynamic candidate path provisioning.
  //
  // RFC 9256 section 2.2, SR Policy dynamic candidate paths.
  //
  // Manage subresources under
  //     `p2pSrTePolicy/{policy_id}/candidatePath/{path_id}`.
  rpc GetP2pSrTePolicyCandidatePath(GetP2pSrTePolicyCandidatePathRequest) returns (P2pSrTePolicyCandidatePath) {}
  rpc ListP2pSrTePolicyCandidatePaths(ListP2pSrTePolicyCandidatePathsRequest) returns (ListP2pSrTePolicyCandidatePathsResponse) {}
  rpc CreateP2pSrTePolicyCandidatePath(CreateP2pSrTePolicyCandidatePathRequest) returns (P2pSrTePolicyCandidatePath) {}
  rpc UpdateP2pSrTePolicyCandidatePath(UpdateP2pSrTePolicyCandidatePathRequest) returns (P2pSrTePolicyCandidatePath) {}
  rpc DeleteP2pSrTePolicyCandidatePath(DeleteP2pSrTePolicyCandidatePathRequest) returns (google.protobuf.Empty) {}

  // TODO: Consider RFC 8623 P2MP TE -like request
  // TODO: Consider PHY-layer requests (bent pipe, etc)
  // TODO: Add a DigitalTransparentService request (details TBD)
  // TODO: NativeIpForwardingRequest
  // TODO: BundleProtocolServiceRequest
  // TODO: MEF E-{Line,Tree,LAN} services
  // TODO: 3GPP services
  // TODO: Transmission Plan (Reservation)
  // TODO: Drain/PlannedOutage/MaintenanceWindow
}

message CreateServiceProvisioningRequestRequest {
  ServiceProvisioningRequest request = 1;
}

message UpdateServiceProvisioningRequestRequest {
  ServiceProvisioningRequest request = 1;
  // TODO: add FieldMask support
}

message DeleteServiceProvisioningRequestRequest {
  string request_id = 1;
}

message GetServiceProvisioningRequestRequest {
  string request_id = 1;
}

message ListServiceProvisioningRequestsRequest {
  // presently empty
}

message ListServiceProvisioningRequestsResponse {
  repeated ServiceProvisioningRequest requests = 1;
}

message ServiceProvisioningRequest {
  // An identifier for this request, unique among all registered
  // requests. It is RECOMMENDED that this be a UUID.
  string id = 1;

  // An optional free-form description of this request.
  //
  // Opaque to Spacetime, but MAY appear in a UI or other rendering
  // of network operational state.
  string description = 2;

  // The priority field allows the requester to specify the order in
  // which service requests are satisfied relative to other requests.
  //
  // A request will be treated as having a higher priority if the
  // value of this field is arithmetically greater than that of
  // another service request.
  //
  // Users may want to directly map this to some utility metric of
  // relevance to their network operations, e.g. estimated revenue,
  // number of customers served, etc.
  //
  // Cf. RFC 9256 S2.12's re-compute priority.
  double priority = 3;

  // The time interval over which this service is requested.
  //
  // If start_time is empty the service is requested to be provisioned
  // at the earliest possible time it may be realized in the network.
  //
  // If end_time is empty the service is requested to be provisioned
  // until this specific request is canceled or this interval field
  // is updated with a non-empty end_time.
  google.type.Interval interval = 4;

  // A simple way to temporarily disable this request without deleting
  // it from the store of requests. Requests that are disabled will
  // not be provisioned by Spacetime, but evaluation of candidate
  // links and topologies may still be performed (to improve rapidity
  // of provisioning once re-enabled).
  bool disabled = 5;

  // TODO: consider adding a Cost message here, to express allowed
  // cost ranges in units of google.type.Money, or other resource,
  // per time interval or per data transmission unit.
  //
  // Cost cost = ...;

  reserved 6 to 9;

  oneof type {
    P2pSrTePolicyRequest p2p_sr_te_policy = 10;
  }

  reserved 11 to max;
}

// A Point-to-Point (P2P) Segment Routing (SR) Traffic Engineering (TE)
// Policy.
//
// Describes one SR TE policy between two EK_ROUTE_FN entities in the
// data model.
//
// See also:
//   - RFC 9256
//   - draft-ietf-pce-segment-routing-policy-cp
//   - draft-ietf-spring-sr-policy-yang
message P2pSrTePolicy {
  option (google.api.resource) = {
    type: "provisioning.spacetimeapis.com/P2pSrTePolicy"
    pattern: "p2pSrTePolicies/{policy_id}"
    singular: "p2pSrTePolicy"
    plural: "p2pSrTePolicies"
  };

  // The resource name of this policy.
  // Format: `p2pSrTePolicies/{policy_id}`
  string name = 1 [(google.api.field_behavior) = IDENTIFIER];

  // The priority field allows the requester to specify the order in
  // which requests for Provisioning resources are satisfied relative
  // to all other requests.
  //
  // A request will be treated as having a higher priority if the
  // value of this field is arithmetically greater than that of
  // another service request.
  //
  // Users may want to directly map this to some utility metric of
  // relevance to their network operations, e.g. estimated revenue,
  // number of customers served, etc.
  //
  // Cf. RFC 9256 S2.12's re-compute priority.
  double priority = 2;

  // The time interval over which this service is requested.
  //
  // If start_time is empty the service is requested to be provisioned
  // at the earliest possible time it may be realized in the network.
  //
  // If end_time is empty the service is requested to be provisioned
  // until this specific request is canceled or this interval field
  // is updated with a non-empty end_time.
  google.type.Interval interval = 3;

  // A simple way to temporarily disable this request without deleting
  // it from the store of requests. Requests that are disabled will
  // not be provisioned by Spacetime, but evaluation of candidate
  // links and topologies may still be performed (to improve rapidity
  // of provisioning once re-enabled).
  bool disabled = 4;

  // NMTS Entity IDs corresponding to the source and destination
  // EK_ROUTE_FN Entity elements already created within the network
  // data model.
  //
  // RFC 9256 S2.1 SR Policy identifying tuple; "[a]n SR Policy MUST
  // be identified through the tuple <Headend, Color, Endpoint>."
  //
  // Note: "The color is an unsigned non-zero 32-bit integer value..."
  string headend = 5;
  uint32 color = 6;
  string endpoint = 7;

  // RFC 9256 S2.1; "[a]n implementation MAY allow the assignment
  // of a symbolic name..."
  string symbolic_name = 8;
}

message GetP2pSrTePolicyRequest {
  // The resource name of the policy to retrieve.
  // Format: `p2pSrTePolicies/{policy_id}`
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "provisioning.spacetimeapis.com/P2pSrTePolicy"
    }];
}

message ListP2pSrTePoliciesRequest{
}

message ListP2pSrTePoliciesResponse{
  repeated P2pSrTePolicy p2p_sr_te_policies = 1;
}

message CreateP2pSrTePolicyRequest{
  // The ID to use for the policy, which will become the final component of
  // the policy's resource name, i.e. `p2pSrTePolicies/{policy_id}`.
  //
  // This value should be 4-63 characters, and valid characters
  // are /[a-z][0-9]-/.
  string policy_id = 2 [(google.api.field_behavior) = REQUIRED];

  // The policy to create.
  P2pSrTePolicy policy = 3 [(google.api.field_behavior) = REQUIRED];
}

message UpdateP2pSrTePolicyRequest{
  // The policy to update.
  //
  // The policy's `name` field is used to identify the policy to be updated.
  // Format: `p2pSrTePolicies/{policy_id}`
  P2pSrTePolicy policy = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;

  // If set to true, and the policy is not found, a new policy will be
  // created. In this situation, `update_mask` is ignored.
  bool allow_missing = 3;
}

message DeleteP2pSrTePolicyRequest{
  // The resource name of the policy to delete.
  // Format: `p2pSrTePolicies/{policy_id}`
  //
  // Deleting a P2P SR-TE Policy also deletes all its Candidate Paths.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "provisioning.spacetimeapis.com/P2pSrTePolicy"
    }];
}

message P2pSrTePolicyCandidatePath {
  option (google.api.resource) = {
    type: "provisioning.spacetimeapis.com/P2pSrTePolicyCandidatePath"
    pattern: "p2pSrTePolicies/{policy_id}/candidatePaths/{path_id}"
    singular: "p2pSrTePolicyCandidatePath"
    plural: "p2pSrTePoliciesCandidatePaths"
  };

  // The resource name of this candidate path.
  // Format: `p2pSrTePolicies/{policy_id}/candidatePaths/{path_id}`
  string name = 1 [(google.api.field_behavior) = IDENTIFIER];

  // Candidate Paths inherit the scheduling parameters of their
  // parent P2P SR-TE Policy.

  // RFC 9256 S2.5 Discriminator; used to associate a candidate path
  // with this specific SR Policy's path request.
  uint32 discriminator = 2;
  // RFC 9256 S2.6 optional symbolic name.
  string symbolic_name = 3;
  // RFC 9256 S2.7 Preference. An indication of this requested
  // candidate path's priority relative to others in the same
  // SR policy.
  uint32 preference = 4;

  // Quantitative path metrics.
  Metrics metrics = 5;
}

message GetP2pSrTePolicyCandidatePathRequest{
  // The resource name of the candidate path to retrieve.
  // Format: `p2pSrTePolicies/{policy_id}/candidatePaths/{path_id}`
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "provisioning.spacetimeapis.com/P2pSrTePolicyCandidatePath"
    }];
}

message ListP2pSrTePolicyCandidatePathsRequest{
  // The parent policy for which to list candidate paths.
  // Format: `p2pSrTePolicies/{policy_id}`
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      child_type: "provisioning.spacetimeapis.com/P2pSrTePolicyCandidatePath"
    }];
}

message ListP2pSrTePolicyCandidatePathsResponse{
  repeated P2pSrTePolicyCandidatePath p2p_sr_te_policy_candidate_paths = 1;
}

message CreateP2pSrTePolicyCandidatePathRequest{
  // The parent policy for which this candidate path will be created.
  // Format: `p2pSrTePolicies/{policy_id}`
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      child_type: "provisioning.spacetimeapis.com/P2pSrTePolicyCandidatePath"
    }];

  // The ID to use for the path, which will become the final component of
  // the path's resource name, i.e.
  // `p2pSrTePolicies/{policy_id}/candidatePaths/{path_id}`
  //
  // This value should be 4-63 characters, and valid characters
  // are /[a-z][0-9]-/.
  string path_id = 2 [(google.api.field_behavior) = REQUIRED];

  // The Candidate Path to create.
  P2pSrTePolicyCandidatePath path = 3 [(google.api.field_behavior) = REQUIRED];
}

message UpdateP2pSrTePolicyCandidatePathRequest{
  // The candidate path to update.
  //
  // The candidate path's `name` field is used to identify the candidate
  // path to be updated.
  // `p2pSrTePolicies/{policy_id}/candidatePaths/{path_id}`
  P2pSrTePolicyCandidatePath path = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;

  // If set to true, and the candidate is not found, a new candidate will
  // be created, subject to the existence the parent SR-TE Policy. In this
  // situation, `update_mask` is ignored.
  bool allow_missing = 3;
}

message DeleteP2pSrTePolicyCandidatePathRequest{
  // The resource name of the candidate path to delete.
  // Format: `p2pSrTePolicies/{policy_id}/candidatePaths/{path_id}`
  //
  // Delete all Candidate Paths associated with a P2P SR-TE Policy
  // DOES NOT delete the policy itself.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "provisioning.spacetimeapis.com/P2pSrTePolicyCandidatePath"
    }];
}