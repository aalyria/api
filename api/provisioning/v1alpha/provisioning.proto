// Copyright (c) Aalyria Technologies, Inc., and its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package aalyria.spacetime.api.provisioning.v1alpha;

import "api/provisioning/v1alpha/p2p_sr_te_policy_request.proto";
import "google/protobuf/empty.proto";
import "google/type/interval.proto";


option java_package = "com.aalyria.spacetime.api.provisioning.v1alpha";
option go_package = "aalyria.com/spacetime/api/provisioning/v1alpha";

service Provisioning {
  // Managing ServiceProvisioningRequests.

  // Registers the provided ServiceProvisioningRequest, subject to the
  // constraint that the request's ID is non-empty and does not collide
  // with any other registory request.
  //
  // Additional checks may be performed, including validating the
  // existence of any NMTS Model API Entity IDs referenced by the request.
  rpc CreateServiceProvisioningRequest(CreateServiceProvisioningRequestRequest)
      returns (google.protobuf.Empty) {}

  // Updates a previously-registered ServiceProvisioningRequest.
  rpc UpdateServiceProvisioningRequest(UpdateServiceProvisioningRequestRequest)
      returns (google.protobuf.Empty) {}

  // Delete the ServiceProvisioningRequest matching the ID given.
  rpc DeleteServiceProvisioningRequest(DeleteServiceProvisioningRequestRequest)
      returns (google.protobuf.Empty) {}

  // Retrieve the ServiceProvisioningRequest matching the ID given.
  rpc GetServiceProvisioningRequest(GetServiceProvisioningRequestRequest)
      returns (ServiceProvisioningRequest) {}

  // List all registered ServiceProvisioningRequests.
  rpc ListServiceProvisioningRequests(ListServiceProvisioningRequestsRequest)
      returns (ListServiceProvisioningRequestsResponse) {}
}

message CreateServiceProvisioningRequestRequest {
  ServiceProvisioningRequest request = 1;
}

message UpdateServiceProvisioningRequestRequest {
  ServiceProvisioningRequest request = 1;
}

message DeleteServiceProvisioningRequestRequest {
  string request_id = 1;
}

message GetServiceProvisioningRequestRequest {
  string request_id = 1;
}

message ListServiceProvisioningRequestsRequest {
  // presently empty
}
message ListServiceProvisioningRequestsResponse {
  repeated ServiceProvisioningRequest requests = 1;
}

message ServiceProvisioningRequest {
  // An identifier for this request, unique among all registered
  // requests. It is RECOMMENDED that this be a UUID.
  string id = 1;

  // An optional free-form description of this request.
  //
  // Opaque to Spacetime, but MAY appear in a UI or other rendering
  // of network operational state.
  string description = 2;

  // The priority field allows the requester to specify the order in
  // which service requests are satisfied relative to other requests.
  //
  // A request will be treated as having a higher priority if the
  // value of this field is arithmetically greater than that of
  // another service request.
  //
  // Users may want to directly map this to some utility metric of
  // relevance to their network operations, e.g. estimated revenue,
  // number of customers served, etc.
  //
  // Cf. RFC 9256 S2.12's re-compute priority.
  double priority = 3;

  // The time interval over which this service is requested.
  //
  // If start_time is empty the service is requested to be provisioned
  // at the earliest possible time it may be realized in the network.
  //
  // If end_time is empty the service is requested to be provisioned
  // until this specific request is canceled or this interval field
  // is updated with a non-empty end_time.
  google.type.Interval interval = 4;

  // A simple way to temporarily disable this request without deleting
  // it from the store of requests. Requests that are disabled will
  // not be provisioned by Spacetime, but evaluation of candidate
  // links and topologies may still be performed (to improve rapidity
  // of provisioning once re-enabled).
  bool disabled = 5;

  // TODO: consider adding a Cost message here, to express allowed
  // cost ranges in units of google.type.Money, or other resource,
  // per time interval or per data transmission unit.
  //
  // Cost cost = ...;

  reserved 6 to 9;

  oneof type {
    // RFC 9522 S5.1.1.3; RFC 9256 SR Policy.
    P2pSrTePolicyRequest p2p_sr_te_policy = 10;
    // TODO: Consider RFC 8623 P2MP TE -like request
    // TODO: Consider PHY-layer requests (bent pipe, etc)
    // TODO: Add a DigitalTransparentService request (details TBD)
    // TODO: NativeIpForwardingRequest
    // TODO: BundleProtocolServiceRequest
    // TODO: MEF E-{Line,Tree,LAN} services
    // TODO: 3GPP services
  }

  reserved 11 to max;
}
