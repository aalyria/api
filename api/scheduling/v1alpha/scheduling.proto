// Copyright 2024 Aalyria Technologies, Inc., and its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package aalyria.spacetime.scheduling.v1alpha;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";

option go_package = "aalyria.com/spacetime/api/scheduling/v1alpha";
option java_package = "com.aalyria.spacetime.scheduling.v1alpha";

service Scheduling {
  // Establishes a bidirectional stream through which the SDN controller may
  // send scheduling requests to the SDN agent, and the agent may respond.
  //
  // The use of the stream allows the SDN controller to send requests to the
  // agent even though the SDN controller may not be able to initiate a
  // connection to the agent (if the agent is behind a firewall, for example,
  // or a NAT gateway).
  //
  // The SDN controller will leave the stream open indefinitely. In the event
  // that the stream closes, the agent should re-establish the stream to
  // continue receiving requests.
  rpc ReceiveRequests(stream ReceiveRequestsMessageToController)
      returns (stream ReceiveRequestsMessageFromController) {}


  // Notifies the SDN controller that an agent's schedule has been reset. The
  // agent must call this upon startup and after any event that has reset the
  // schedule.
  rpc Reset(ResetRequest) returns (google.protobuf.Empty) {}
}

// The message type for Scheduling.ReceiveRequests in the direction toward the
// controller.
message ReceiveRequestsMessageToController {
  message Hello {
    // Required. Identifies the SDN agent whose schedule is to be managed by
    // this scheduling session.
    string agent_id = 1;
  }

  message Response {
    // Required. The ID of the request to which this response corresponds. See
    // ReceiveRequestsMessageFromController.request_id.
    int64 request_id = 1;

    // The response status.
    google.rpc.Status status = 2;
  }

  // Required in the initial request of the session. Identifies the SDN agent
  // and the properties of the underlying channel.
  Hello hello = 1;

  // A response to a request received from the SDN controller.
  //
  // The response may originate from a proxy rather than the SDN agent itself.
  // For example, if the proxy is unable to deliver the request to the SDN
  // agent, the proxy may populate the response with an appropriate error.
  Response response = 2;
}

// The message type for Scheduling.ReceiveRequests in the direction from the
// controller.
//
// This is a response message in that it flows from server to client, however
// it holds requests being sent to the SDN agent (the client) by the SDN
// controller (the server).
message ReceiveRequestsMessageFromController {
  // An SDN-controller-generated value uniquely identifying the request within
  // the scope of the scheduling session. That is, two requests received from
  // the same session will always have different request IDs. The SDN agent
  // must provide the ID in the response to this request (see
  // ReceiveRequestsMessageToController.Response.request_id).
  int64 request_id = 1;

  // The contents of the request.
  oneof request {
    // Creates an entry in the agent's schedule. Note that entries are
    // immutable: once created, an entry may not changed, though it may be
    // deleted.
    CreateEntryRequest create_entry = 2;

    // Deletes an entry from the agent's schedule.
    DeleteEntryRequest delete_entry = 3;

    // Finalizes all schedule entries earlier than a specified time.
    //
    // Notifies the agent that all aspects of its schedule pertaining to the
    // interval prior to a given instant will no longer be modified . This frees
    // the agent to garbage-collect all entries scheduled for before that
    // instant.
    FinalizeRequest finalize = 4;
  }
}

message CreateEntryRequest {
  // Required. A token that must match the agent's token for the request to be
  // accepted (see ResetRequest.schedule_manipulation_token). This ensures that
  // the agent does not execute an operation intended for an old edition of the
  // schedule on a newer version.
  string schedule_manipulation_token = 1;

  // Required. The request's sequence number among all requests in the
  // Scheduling service with the same schedule manipulation token. The sequence
  // number resets with each new schedule manipulation token.
  uint64 seqno = 2;

  // Required. A unique identifier of the schedule entry being created.
  string id = 3;

  // Required. The time at which the entry is scheduled to be executed.
  google.protobuf.Timestamp time = 4;

  oneof configuration_change {
    SetRoute set_route = 5;
    DeleteRoute delete_route = 6;
    SetModemConfiguration set_modem_configuration = 7;
    DeleteModemConfiguration delete_modem_configuration = 8;
    SetSrPolicy set_sr_policy = 9;
    DeleteSrPolicy delete_sr_policy = 10;
  }
}

message SetRoute {
  // The source prefix of the route.
  //
  // An IP or IPv6 address optionally followed by a slash and the prefix
  // length.
  string from = 1;

  // The destination prefix of the route.
  //
  // An IP or IPv6 address optionally followed by a slash and the prefix
  // length.
  string to = 2;

  // The output device name.
  string dev = 3;

  // The address of the nexthop router.
  //
  // An IP or IPv6 address.
  string via = 4;
}

message DeleteRoute {
  // The source prefix of the route.
  //
  // An IP or IPv6 address optionally followed by a slash and the prefix
  // length.
  string from = 1;

  // The destination prefix of the route.
  //
  // An IP or IPv6 address optionally followed by a slash and the prefix
  // length.
  string to = 2;
}

message SetModemConfiguration {
  string modem_id = 1;

  // The collection of beams to be illuminated. The beams are to be illuminated
  // one-at-a-time in a repeating sequence determined by the
  // beam_hopping_time_slots.
  repeated Beam beams = 2;

  // A collection of beam-hopping time slots representing a beam-hopping frame.
  // Each slot consists of a zero-based index into the collection of beams,
  // representing the beam to be illuminated during that time slot. A value of
  // -1 represents that no beam should be illuminated during that time slot.
  //
  // The frame should begin at the time at which the modem configuration is
  // applied. (That is, the time indicated in the CreateEntryRequest message).
  repeated int32 beam_hopping_time_slots = 3;
}

message DeleteModemConfiguration {
  string modem_id = 1;
}

message Beam {
  BeamTarget target = 1;

  // Parameters specifying the configuration of the beam in the receive
  // direction. Absent if the beam is to be used for transmit only.
  RxConfiguration rx = 2;

  // Parameters specifying the configuration of the beam in the transmit
  // direction. Absent if the beam is to be used for receiving only.
  TxConfiguration tx = 3;

  // The collection of endpoints served by the beam.
  // For example, a collection of user terminals (UTs) served.
  //
  // Each endpoint is the ID of a network node in Spacetime's network model.
  repeated Endpoint endpoints = 4;

  // ID of the beam shape.
  string shape_id = 5;
}

message BeamTarget {
  oneof target {
    Ecef ecef = 1;
    string ccsds_oem_file_content = 2;
    AzEl az_el = 3;
  }
}

message Ecef {
  int64 x_m = 1;
  int64 y_m = 2;
  int64 z_m = 3;
}

// An azimuth and elevation angle pair.
//
// The azimuth angle of a vector is the angle between the x-axis and the
// orthogonal projection of the vector onto the xy plane. The angle is positive
// in going from the x axis toward the y axis. The elevation angle is the angle
// between the vector and its orthogonal projection onto the xy-plane.
message AzEl {
  // Azimuth, in degrees.
  double az_deg = 1;

  // Elevation, in degrees.
  double el_deg = 2;
}

message RxConfiguration {
  uint64 center_frequency_hz = 1;
  uint64 channel_bandwidth_hz = 2;
  Polarization polarization = 3;

  // Symbol rate in Megasymbols per second.
  double symbol_rate_msps = 5;

  ModemMode mode = 4;
}

message TxConfiguration {
  uint64 center_frequency_hz = 1;
  uint64 channel_bandwidth_hz = 2;
  Polarization polarization = 3;

  // Transmit power in Watts.
  double power_w = 5;

  // Symbol rate in Megasymbols per second.
  double symbol_rate_msps = 6;

  ModemMode mode = 4;

  // The lowest MODCOD common among all endpoints.
  string lowest_common_modcod = 7;
}

enum Polarization {
  POLARIZATION_UNSPECIFIED = 0;
  POLARIZATION_LHCP = 1; // Left-handed circular polarization
  POLARIZATION_RHCP = 2; // Right-handed circular polarization
}

enum ModemMode {
  MODEM_MODE_UNSPECIFIED = 0;
  MODEM_MODE_DVB_RCS2 = 1;
  MODEM_MODE_DVB_S2X = 2;
}

message Endpoint {
  string id = 1;
  string lowest_supported_rx_modcod = 2;
  double rx_reference_throughput_bps = 3;
  double tx_reference_throughput_bps = 4;
}

// A Segment Routing Policy Architecture policy description.
// Based in part upon elements from:
//   * RFC 9256
//   * draft-ietf-idr-sr-policy-safi
//   * draft-ietf-idr-bgp-sr-segtypes-ext
//   * draft-ietf-spring-sr-policy-yang
message SetSrPolicy {
  // The name of this SR policy, unique among all SR policies, and
  // matching the name given in the `ServiceRequest` that caused
  // this policy to be instantiated.
  string name = 1;

  repeated ExplicitPath paths = 2;

  message ExplicitPath {
    // Assigning meaning to color can be used to indicate alternate
    // paths (backup paths of various types).
    uint32 color = 1;

    // Within explicit paths of the same color, the weight to be
    // given to this specific segment list (for multipathing).
    uint32 weight = 2;

    // An ordered list of segments from ingress to egress. The first
    // segment may be used to indicate the first hop and therefore
    // need not be encoded in any dataplane encapsulation.
    repeated SrSegment segments = 3;
  }
}

message SrSegment {
  oneof type {
    uint32 mpls = 1;  // "Type A"; RFC 8294 mpls-label
  }
}

message DeleteSrPolicy {
  string name = 1;
}

message DeleteEntryRequest {
  // Required. A token that must match the agent's token for the request to be
  // accepted (see ResetRequest.schedule_manipulation_token). This ensures that
  // the agent does not execute an operation intended for an old edition of the
  // schedule on a newer version.
  string schedule_manipulation_token = 1;

  // Required. The request's sequence number among all requests in the
  // Scheduling service with the same schedule manipulation token. The sequence
  // number resets with each new schedule manipulation token.
  uint64 seqno = 2;

  // Required. The schedule entry to delete.
  string id = 3;
}

message FinalizeRequest {
  // Required. A token that must match the agent's token for the request to be
  // accepted (see ResetRequest.schedule_manipulation_token). This ensures that
  // the agent does not execute an operation intended for an old edition of the
  // schedule on a newer version.
  string schedule_manipulation_token = 1;

  // Required. The request's sequence number among all requests in the
  // Scheduling service with the same schedule manipulation token. The sequence
  // number resets with each new schedule manipulation token.
  uint64 seqno = 2;

  // Required. The time before which the schedule will no longer be modified.
  google.protobuf.Timestamp up_to = 3;
}

message ResetRequest {
  // Required. Identifies the agent whose schedule has been reset.
  string agent_id = 1;

  // Required. The new schedule's manipulation token. Only requests annotated
  // with a matching token should be accepted.
  string schedule_manipulation_token = 2;
}
