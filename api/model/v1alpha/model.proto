// Copyright (c) Aalyria Technologies, Inc., and its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package aalyria.spacetime.api.model.v1alpha;

import "google/protobuf/empty.proto";
import "nmts/proto/nmts.proto";

option java_package = "com.aalyria.spacetime.api.model.v1alpha";
option go_package = "aalyria.com/spacetime/api/model/v1alpha";

service Model {
  // Insert or overwrite an nmts.Entity.
  rpc UpsertEntity(UpsertEntityRequest) returns (UpsertEntityResponse) {}
  // Change a portion of an nmts.Entity.
  rpc UpdateEntity(UpdateEntityRequest) returns (UpdateEntityResponse) {}
  // Delete an nmts.Entity.
  rpc DeleteEntity(DeleteEntityRequest) returns (google.protobuf.Empty) {}

  // Insert an nmts.Relationship.
  rpc InsertRelationship(InsertRelationshipRequest)
      returns (InsertRelationshipResponse) {}
  // Delete an nmts.Relationship.
  rpc DeleteRelationship(DeleteRelationshipRequest)
      returns (google.protobuf.Empty) {}

  // Retrience an nmts.Entity and all the associated ntms.Relationships.
  rpc GetEntity(GetEntityRequest) returns (GetEntityResponse) {}

  // List nmts.Entity and nmts.Relatioship instances present in the model.
  rpc ListElements(ListElementsRequest) returns (ListElementsResponse) {}
}

message UpsertEntityRequest {
  nmts.Entity entity = 1;
}
message UpsertEntityResponse {
}

message UpdateEntityRequest {
  nmts.PartialEntity patch = 1;
}
message UpdateEntityResponse {
}

message DeleteEntityRequest {
  string entity_id = 1;
}

message InsertRelationshipRequest {
  nmts.Relationship relationship = 1;
}
message InsertRelationshipResponse {
}

message DeleteRelationshipRequest {
  nmts.Relationship relationship = 1;
}

message GetEntityRequest {
  string entity_id = 1;
}
message GetEntityResponse {
  nmts.Entity entity = 1;

  // The set of nmts.Relationships this entity originates, if any.
  repeated nmts.Relationship a_relationships = 2;

  // The set of nmts.Relationships this entity terminates, if any.
  repeated nmts.Relationship z_relationships = 3;
}

message ListElementsRequest {
  // TODO: Support expressing some filtering/querying.
}
message ListElementsResponse {
  repeated nmts.Entity entities = 1;
  repeated nmts.Relationship relationships = 2;
}
