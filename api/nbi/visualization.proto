// Copyright (c) Aalyria Technologies, Inc., and its affiliates.
// Confidential and Proprietary. All rights reserved.

syntax = "proto2";

package minkowski.proto;

import "api/common/coordinates.proto";
import "api/common/time.proto";
import "api/common/wireless_transceiver.proto";
import "api/nbi/czml.proto";
import "api/nbi/network_link.proto";

option java_package = "com.aalyria.minkowski.proto";
option go_package = "aalyria.com/minkowski/api/nbi";

message VisualizationModel {
  // Uniquely identifies the model.
  optional string model_id = 1;

  // A 3D model in binary glTF (GL Transmission Format).
  // Quantized and oct-encoded binary glTF is also supported.
  optional bytes gltf_3d_model = 2;
}

message PlatformSelector {
  repeated string platform_ids = 1;

  // Defines cesium graphics options for platforms.
  optional PlatformGraphicsOptions graphics_options = 2;
}

message TransceiverModelSelector {
  repeated TransceiverModelId transceiver_model_ids = 1 [deprecated = true];

  // Defines cesium graphics options for transceivers.  These represent the
  // default transceiver_graphics_options and are used when there is no
  // per_transceiver_graphics_override for a specific transceiver id.  If
  // transceiver_graphics_options are not set, then only transceivers specified
  // in per_transceiver_graphics_override are visualized.
  optional TransceiverGraphicsOptions graphics_options = 2;

  // Defines cesium graphics options for specific transceivers.  These options
  // will override any options set in the above transceiver_graphics_options.
  repeated TransceiverIdAndGraphicsOptions override_graphics_options = 3;
}

message CartographicSelector {
  // The selected location, if any (optional).
  optional GeodeticWgs84 location = 1;
  optional double distance_m = 2;
}

message LinkSelector {
  repeated NetworkLink links = 1;
}

message IntentSelector {
  repeated string intent_ids = 1;
}

message CesiumGraphicsSelection {
  // May be used to constrain the set of platforms in the response.
  // Platform graphics include its point, its trajectory, and a 3D model.
  // If omitted, the response will contain graphics for all platforms.
  optional PlatformSelector platform_graphics = 1;

  // May be used to constrain the set of links in the response.
  // Link graphics visualize the state of links and routes between platforms.
  // If omitted, the response will contain graphics for all links.
  optional IntentSelector wireless_link_graphics = 6;
  optional LinkSelector link_graphics = 2 [deprecated = true];

  // May be used to constrain the set of transceiver models in the response.
  // Transceiver graphics visualize any azimuth/elevation or FoR masks.
  // If omitted, the response will contain graphics for all transceivers.
  optional TransceiverModelSelector transceiver_graphics = 3;

  // May be used to enable graphics showing the locations of all potential
  // interference victims around some cartographic location. If omitted, the
  // response will contain graphics for all potential victims in the store.
  optional CartographicSelector interference_victims_graphics_selector = 4;

  reserved 5;
}

message TransceiverGraphicsOptions {
  // If true and an azimuth/elevation mask is defined, the azimuth
  // elevation mask visualization is displayed.
  optional bool show_az_el_mask = 1;

  // If true and a field of view is defined, the field of view is displayed
  optional bool show_field_of_view = 2;

  // If true and any obstruction field of views are defined, the obstruction
  // field of view visualizations are displayed.
  optional bool show_obstruction_field_of_view = 3;

  // If true any obstruction field of views are defined, the obstruction field
  // of view label visualizations are displayed.
  optional bool show_obstruction_field_of_view_label = 4;
}

message TransceiverIdAndGraphicsOptions {
  optional TransceiverModelId id = 1;
  optional TransceiverGraphicsOptions graphics_options = 2;
}

message PlatformGraphicsOptions {
  // Defines the amount of time path graphics are displayed showing the future
  // path of the platform
  optional Duration path_visualization_lead = 1;

  // Defines the amount of time path graphics are displayed showing the
  // historical path of the platform
  optional Duration path_visualization_trail = 2;
}

message CesiumVisualizationRequest {
  reserved 1 to 15;

  // Cesium Graphics Selections
  optional CesiumGraphicsSelection cesium_graphics_selection = 16;
}

message CesiumVisualizationResponse {
  repeated minkowski.proto.CzmlPacket packets = 1;
}

message HistoricalCzmlResponse {
  repeated minkowski.proto.CzmlPacket packets = 1;
}

enum HistoryMethod {
  // protolint:disable:next ENUM_FIELD_NAMES_PREFIX
  // protolint:disable:next ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH
  UNKNOWN_HISTORY_METHOD = 0;

  // Creates visualization using the latest entity snapshots available at time
  // interval start and propagates forward in time until time interval end.
  INSTANT_FORWARD = 1; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX

  // Creates visualization using all historical snapshots available between time
  // interval start and time interval end.  This is essentially a replay of what
  // happened during the time interval.
  REPLAY_OVER_TIME = 2; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
}

message HistoricalCzmlRequest {
  reserved 4;
  // Time interval in the past to query for data.  Both a start time and end
  // time are required.
  optional TimeInterval time_interval = 1;

  // Specifies how data should be visualized over the provided time interval.
  optional HistoryMethod history_method = 2;

  // Used to select the platforms, links, and other graphics that are displayed
  // globally or on a per-entity basis (by providing a list of entity IDs).
  optional CesiumGraphicsSelection cesium_graphics_selection = 3;
}
