// Copyright (c) Aalyria Technologies, Inc., and its affiliates.
// Confidential and Proprietary. All rights reserved.

syntax = "proto2";

package minkowski.proto;

// import "google/api/field_behavior.proto";
import "api/common/network.proto";
import "api/common/time.proto";
import "api/common/tunnel.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/type/interval.proto";

option java_package = "com.aalyria.minkowski.proto";
option go_package = "aalyria.com/minkowski/api/nbi";

message TunnelConfiguration {
  optional string src_interface_id = 1;
  optional string dst_interface_id = 2;
  optional TunnelMethod method = 3;

  // Toporouter will produce a tunnel classifier based on L3 addresses of the
  // provided interface IDs. Optionally, additional classification criteria can
  // be provided here. These values are used as the bottom layer of a template,
  // and then the L3 source/destination spec is overlaid.
  optional FlowClassifier classifier = 4;
  reserved 5 to max;
}

// Describes a request to provision a network flow.
message RouteProvision {
  // Labels the network flow type in the NetOps UI.
  optional string type = 13;  // [(google.api.field_behavior) = OPTIONAL];

  // The network node/elements that may act as the source of the network flow.
  repeated string src_element_ids = 2;

  // The network node/elements that may act as the destination of the network
  // flow.
  repeated string dst_element_ids = 3;

  // By default, packets are classified as belonging to this provisioned flow if
  // their IP source & destination address fields are within the subnet address
  // ranges of the source and destination nodes chosen by toporouter from the
  // source and destination elements specified above. This field allows a client
  // to optionally specify a custom classifier. Custom classifiers defined in
  // terms of nodes will have the node overwritten based on the solution route.
  optional FlowClassifier classifier = 9;

  // Requests that the network flow traffic be tunnelled.
  // TODO: Reconsider how to specify these.
  repeated TunnelConfiguration tunnels = 10;

  // The priority field allows the requester to specify the order in which
  // route provision requests are satisfied relative to other requests.
  // A request will be treated as having a higher priority if the value of this
  // field is greater than that of another route provision request.
  // Users may want to directly map it to some utility metric of relevance to
  // their network, such as estimated revenue, number of customers served, etc.
  optional double priority = 6;

  // Classification of traffic being requested for this provision.
  // For example, this is useful for filtering drain violations (see comments in
  // DrainProvision proto, but note that eventually we may explore other drain
  // filtering approaches such as explicit RouteProvision id white-listing).
  enum FlowType {
    FLOW_TYPE_UNSPECIFIED = 0;
    // Traffic generated or received by network devices for network control
    // (e.g., network formation such as routing policies in the forwarding
    // plane to glue the network together) or network management (e.g.,
    // monitoring, SSH, configs, updates).
    // protolint:disable:next ENUM_FIELD_NAMES_PREFIX
    SDN_CONTROL_MANAGEMENT = 1;
    // Customer-generated traffic transiting network devices.
    SDN_FORWARDING = 2; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
  }
  optional FlowType flow_type = 11;

  message FlowRequirements {
    reserved 4, 7 to max;  // NEXT_ID: 7
    // The time interval over which these requirements are applicable.
    optional TimeInterval time_interval = 1;

    // The minimum bandwidth to provision for the flow (optional), in layer 2
    // bits per second.  If the minimum bandwidth cannot be achieved, the flow
    // will not be provisioned at all. If the minimum bandwidth is not
    // specified or is too low, the routing service will assume 100 bps.
    optional double bandwidth_bps_minimum = 2;

    // Requested bandwidth to provision for the flow, in layer 2 bits/sec.
    optional double bandwidth_bps_requested = 3;

    // The maximum allowed end-to-end latency for the flow (optional).
    optional google.protobuf.Duration latency_maximum = 5;

    // Set to true if the network flow being requested may be stored and
    // forwarded later — either at the source node or in transit along the
    // transmission path using store-and-forward protocols.
    //
    // The flow is considered provisioned so long as data accumulating at
    // ‘bandwidth_bps_minimum’ rate across the entirety of the requested time
    // interval or planning horizon may be satisfied by on-path NetworkNodes'
    // Storage.available_bytes.
    optional bool is_disruption_tolerant = 6;
  }
  repeated FlowRequirements requirements = 4;

  // Groups RouteProvisions that provide redundant network flows for an
  // application service (e.g., LTE S1Flex).  The Solver may optimize to
  // prevent correlated failures of flows in the same group.
  // Note: currently Minkowski only supports equivalent RouteProvisions in the
  // same redundancy group.  In future works, this message can be extended to
  // allow active/standby flows.
  message RedundancyGroup {
    optional string id = 1;
  }
  optional RedundancyGroup redundancy_group = 12;

  // True while the Topology & Routing app observes routes installed that
  // satisfy the bandwidth_bps_minimum capacity of the route provision request.
  // Apps may watch this field to know when the provision request is satisfied.
  optional bool is_provisioned_now = 5;

  // Chronological intervals during which the route provision is considered to
  // be provisioned. When the interval's start timestamp is in the future, the
  // route provision is considered to be scheduled such that the route
  // provision will be satisfied beginning at that timestamp.
  repeated google.type.Interval provisioned_intervals = 15;

  message IntentAndIntervals {
    optional string intent_id = 1;
    // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
    repeated google.type.Interval interval = 2;
  }

  // An annotation indicating the intents that support this route provision over
  // time.
  repeated IntentAndIntervals intent_dependencies = 14;

  reserved 1, 7;
  reserved 16 to max;  // Next IDs.
}

// An external request to avoid using an otherwise available node to
// satisfy RouteProvisions.
//
// Drains proceed through the following phases:
// 1. opportunistic: no changes are forced on the topology, but if the drain is
// found to be satisfied naturally, it will be maintained going forward.
// 2. deterrence: traffic is encouraged to move away from the node (perhaps by
// disallowing reconnection, or strongly preferring alternative routes).
// 3. force: traffic is forcefully removed (even if there's nowhere else to send
// it).
//
// It is invalid to specify a DrainProvision which utilizes none of these
// phases, or which tries to enact them out of order.
//
// See below for further modifications to this general theme.
message DrainProvision {
  // The ID of the NetworkNode to drain. To transition to satisfied, all
  // in-scope RouteProvisions must not involve the specified node.
  optional string node_id = 1;
  // Human-friendly note about why this drain is taking place.
  optional string reason = 2;

  // The most recent state of this drain.
  enum State {
    // The initial state for a drain at creation.
    STATE_UNSPECIFIED = 0;
    // Still waiting for drain start time (e.g., now time is before start_time
    // in an opportunistic drain).
    PENDING = 1; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
    // There are possible in-scope route provisions still using the drain
    // target (e.g., solver still waiting opportunistically before force_time).
    UNSATISFIED = 2; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
    // Drain is already satisfied by Solver (e.g., opportuniscally or past
    // force_time), yet waiting for CDPI enactment.
    ENACTING = 3; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
    // Drain is active and in full effect.
    ENACTED = 4; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
    // Drain deletion (i.e., undrain operation) is in-progress.
    DELETING = 5; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
    // Drain deletion is done.
    DELETED = 6; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
  }
  optional State state = 3;

  // The times below define the transitions between the drain phases. The
  // progression must be in the order defined above, or the DrainProvision is
  // invalid. Any phase can be omitted by not providing a time for it.

  // The time to start enforcing opportunistic satisfaction of this drain.  If
  // enabled, this DrainProvision can be satisfied by the natural evolution of
  // the topology without forcing any transition.
  optional google.protobuf.Timestamp opportunistic_start_time = 4;
  // The time at which the topology will start trying to move traffic away from
  // the drained node.
  optional google.protobuf.Timestamp deter_start_time = 5;
  // The time at which the topology will be forcefully changed to enact this
  // drain.
  optional google.protobuf.Timestamp force_time = 6;

  // The following option restricts the scope of RouteProvisions affected by
  // this drain. When no exclusions are specified, this DrainProvision requires
  // that no RouteProvision be satisfied using the node. Exclusions enable, for
  // example, to still allow a node to connect *itself* to the topology without
  // supporting routes *through it* to any other nodes.

  // If true, control and management traffic are allowed while the target is
  // drained.
  optional bool allow_control_management_for_node = 8;

  // Drain satisfaction method by solver.
  enum Method {
    METHOD_UNSPECIFIED = 0;
    WAIT = 1; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
    FORCE = 2; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
  }
  // Only set if drain reaches the ENACTED state.
  optional Method method = 7;

  // Below are output timestamps of critical drain states.
  // Time at drain creation (initial STATE_UNSPECIFIED).
  optional google.protobuf.Timestamp create_time = 9;

  // Solver cycle that satisfies the drain.
  optional google.protobuf.Timestamp solver_satisfaction_time = 14;

  // Time at pending CDPI enactment (ENACTING state).
  optional google.protobuf.Timestamp enacting_time = 10;

  // Time at drain satisfaction (ENACTED state).
  optional google.protobuf.Timestamp enacted_time = 11;

  // Time at undrain request (DELETING state).
  optional google.protobuf.Timestamp deleting_time = 12;

  // Time at undrain completion (DELETED state).
  optional google.protobuf.Timestamp deleted_time = 13;

  reserved 15 to max;  // Next IDs.
}
