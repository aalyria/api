// Copyright (c) Aalyria Technologies, Inc., and its affiliates.
// Confidential and Proprietary. All rights reserved.

syntax = "proto2";

package minkowski.proto;

import "api/common/control_radio.proto";
import "api/common/coordinates.proto";
import "api/common/network.proto";
import "api/common/time.proto";
import "api/common/wireless_transceiver.proto";

option java_package = "com.aalyria.minkowski.proto";
option go_package = "aalyria.com/minkowski/api/nbi";

// Defines a directional link between two logical network interfaces.
message NetworkLink {
  optional NetworkInterfaceId src = 3;
  optional NetworkInterfaceId dst = 4;

  reserved 1, 2;
}

message RadioConfiguration {
  optional NetworkInterfaceId interface_id = 1;

  // Configures the transmitter properties.
  optional TransmitterState tx_state = 2;

  // Configures the receiver properties.
  optional ReceiverState rx_state = 3;

  // Identifies the adaptive data rate table id used to model the link between
  // the transmitter and receiver. This is a required field.
  optional string rate_table_id = 5;

  // Configures the TDMA schedule, if applicable.
  optional TdmaSchedule tdma_schedule = 4;
  reserved 6 to max;  // Next IDs.
}

message Radio {
  // Defines the center of the channel in Hz.
  // For RF transceivers, this is the carrier frequency.
  // For optical transceivers, this may be converted to wavelength.
  optional uint64 center_frequency_hz = 1;
  optional string band_profile_id = 2;
}

message LinkEnd {
  optional NetworkInterfaceId id = 3;
  reserved 1, 2, 4;
}

message BeamTarget {
  oneof type {
    TransceiverModelId transceiver_id = 1;
    Motion coordinates = 2;
  }
}

// Defines a bidirectional network link. If necessary, asymmetric roles for the
// endpoints may be specified.
message BidirectionalLink {
  optional LinkEnd a = 1;
  optional LinkEnd b = 2;

  // These fields are optional and may be omitted for wireless interfaces that
  // do not require centralized orchestration of radio-related parameters.
  // TODO: migrate RadioIntent usage to these fields instead
  optional Radio a_to_b_radio = 3;
  optional Radio b_to_a_radio = 4;
}

// Configures a directional link.
message DirectionalLink {
  // Identifies the wireless network interface.
  optional NetworkInterfaceId id = 1;

  // This field is optional and may be omitted for wireless interfaces that
  // do not require centralized orchestration of radio-related parameters.
  optional Radio radio_configuration = 2;

  // This field is optional and may be omitted for wireless interfaces whose
  // beams are fixed to the platform. It is required for steerable beams.
  optional BeamTarget target = 3;
}

// Defines whether or not a link is usable or possible.
enum Accessibility {
  // protolint:disable:next ENUM_FIELD_NAMES_PREFIX
  // protolint:disable:next ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH
  ACCESS_UNKNOWN = 0;
  ACCESS_EXISTS = 1; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
  ACCESS_MARGINAL = 3; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
  NO_ACCESS = 2; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
}

// A modeled, physical-layer wireless link budget.
// Note that this budget does not include
message WirelessLinkBudget {
  reserved 10 to 14, 16 to max;

  // The transmitter antenna's gain in the link direction, in dB.
  optional double transmitter_antenna_gain_in_link_direction_db = 1;

  // The effective isotropic radiated power from the transmitter, in dBW.
  optional double effective_isotropic_radiated_power_dbw = 2;

  // Maps the name of each propagation loss model to the amount of propagation
  // loss, in dB, that is attributable to that particular model.
  map<string, double> component_propagation_loss_db = 15;

  // The total amount of signal propagation loss, in dB.
  optional double propagation_loss_db = 3;

  // The power at the receiver antenna before receive antenna gain.
  optional double received_isotropic_power_dbw = 4;

  // The received power flux density, in dB(W/m2).
  optional double received_power_flux_density_db_w_per_m2 = 5;

  // The receiver antenna's gain in the link direction, in dB.
  optional double receiver_antenna_gain_in_link_direction_db = 6;

  // This is power at the receiver antenna facing into the rest of the receive
  // chain (the output of the antenna, after Rx antenna gain).
  optional double power_at_receiver_output_dbw = 7;

  // The carrier to noise ratio.
  optional double carrier_to_noise_db = 8;

  // The carrier to noise density, in dB/Hz.
  optional double carrier_to_noise_density_db_per_hz = 9;
}

// Describes expected changes to the accessibility of a link to a destination
// on a particular channel. Includes link metrics when it's accessible.
message LinkReport {
  reserved 1, 3, 4, 6, 8 to max;
  // The ID of the destination interface described by this report.
  optional NetworkInterfaceId dst = 7;  // required

  // The band profile ID for the link being modeled.
  // This field is only applicable to wireless links.
  optional string band_profile_id = 5;

  // A series of non-overlapping time intervals that describe the predicted
  // accessibility of the link -- and link metrics within accessible intervals.
  message AccessInterval {
    // The applicable time interval (may be open ended).
    optional TimeInterval interval = 1;

    // Whether or not the link is predicted/known to be accessible (usable).
    optional Accessibility accessibility = 2;
    // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
    repeated string no_access_reason = 4;

    // Modeled link metric predictions.
    message LinkMetrics {
      reserved 4, 8 to max;

      // A timestamp.
      optional DateTime timestamp = 1;

      // The electromagnetic propagation delay.
      optional Duration propagation_delay = 3;

      // The link direction from transmitter towards the receiver.
      // This field is only applicable to wireless links.
      optional PointingVector pointing_vector = 5;

      // The link distance, in meters.
      // This field is only applicable to wireless links.
      optional double range_m = 6;

      // Maps the channel's center frequency, in Hz, to link metrics.
      // This map is only applicable to wireless links.
      map<uint64, ChannelReport> channel_to_metrics = 7;
      message ChannelReport {
        message PowerLevel {
          // A transmit power level, in watts.
          optional double transmit_power_watts = 1;

          // The modeled wireless link budget at this power level.
          // This field is only populated if requested by an SDN app.
          optional WirelessLinkBudget link_budget = 2;

          // The predicted data rate capacity, in layer 2 bits per second.
          optional double data_rate_bps = 3;

          // The link margin in dB. This is a comparison of received signal
          // level with the minimum usable received signal level. This may be
          // negative if the link is inaccessible.
          optional double link_margin_db = 4;
        }
        // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
        repeated PowerLevel level = 1;

        reserved 2;
      }

      // The modeled data rate capacity, in layer 2 bits per second.
      // This field is only applicable to wired links.
      optional double data_rate_bps = 2;
    }
    repeated LinkMetrics sampled_metrics = 3;
  }
  repeated AccessInterval access_intervals = 2;
}

// Describes expected changes to the accessibility of a link to a destination
// on a particular channel. Includes link metrics when it's accessible.
// TODO: some messages, such as WirelessLinkMetrics, are left
// intentionally incomplete due to partial migration. They exist here because
// this limits extensive throw-away work, but will be filled in along with
// changes to Link Evaluator writing to TransceiverLinkReports.
message WirelessLinkReport {
  // The ID of the destination transceiver model described by this report.
  optional TransceiverModelId dst = 1;  // required

  optional string band_profile_id = 2;  // required

  // A series of non-overlapping time intervals that describe the predicted
  // accessibility of the link -- and link metrics within accessible intervals.
  message WirelessAccessInterval {
    // The applicable time interval (may be open ended).
    optional TimeInterval interval = 1;

    // Whether or not the link is predicted/known to be accessible (usable).
    optional Accessibility accessibility = 2;
    // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
    repeated string no_access_reason = 3;

    // Modeled link metric predictions.
    message WirelessLinkMetrics {
      // A timestamp.
      optional DateTime timestamp = 1;

      // The electromagnetic propagation delay.
      optional Duration propagation_delay = 2;

      // The link direction from transmitter towards the receiver.
      // This field is only applicable to wireless links.
      optional PointingVector pointing_vector = 3;

      // The link distance, in meters.
      // This field is only applicable to wireless links.
      optional double range_m = 4;

      // Maps the channel's center frequency, in Hz, to link metrics.
      // This map is only applicable to wireless links.
      map<uint64, ChannelReport> channel_to_metrics = 5;
      message ChannelReport {
        message PowerLevel {
          // A transmit power level, in watts.
          optional double transmit_power_watts = 1;

          // The modeled wireless link budget at this power level.
          // This field is only populated if requested by an SDN app.
          optional WirelessLinkBudget link_budget = 2;

          // The predicted data rate capacity, in layer 2 bits per second.
          optional double data_rate_bps = 3;

          // The link margin in dB. This is a comparison of received signal
          // level with the minimum usable received signal level. This may be
          // negative if the link is inaccessible.
          optional double link_margin_db = 4;
        }
        // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
        repeated PowerLevel level = 1;

        reserved 2;
      }

      // The modeled data rate capacity, in layer 2 bits per second.
      // This field should only applicable to wired links; however, it is still
      // currently in widespread use for wireless links. b/117899288
      optional double data_rate_bps = 6;
    }
    repeated WirelessLinkMetrics sampled_metrics = 4;
  }
  repeated WirelessAccessInterval access_intervals = 4;
}

// Provides interface link reports for all possible wired links from a source
// interface. It is the responsibility of some SDN application to insert link
// reports corresponding to the physical availability of connections from each
// source interface they manage to any other interfaces which should be
// considered reachable.
message InterfaceLinkReport {
  reserved 1, 3;
  // The source interface for all of the reported possible wired links.
  optional NetworkInterfaceId src = 4;
  // A set of possible links that this source interface could participate in.
  repeated LinkReport links = 2;
}

// Provides transceiver link reports for all possible wireless links from a
// source transceiver. It is the responsibility of some SDN application to
// insert link reports corresponding to the physical availability of connections
// from each source transceiver they manage to any other transceivers which
// should be considered reachable. For example, wireless transmitters may have
// these reports updated for each reachable receiver as a result of the link
// evaluation model.
message TransceiverLinkReport {
  // The source transceiver for all of the reported possible wireless links.
  optional TransceiverModelId src = 1;
  // A set of possible wireless links that this source transceiver could
  // participate in.
  repeated WirelessLinkReport links = 2;
}
