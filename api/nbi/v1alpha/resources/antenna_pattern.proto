// Copyright 2023 Aalyria Technologies, Inc., and its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Protobuf messages used to model antenna radiation patterns.

syntax = "proto2";

package aalyria.spacetime.api.nbi.v1alpha.resources;

option java_package = "com.aalyria.spacetime.api.nbi.v1alpha.resources";
option go_package = "aalyria.com/spacetime/api/nbi/v1alpha/resources";

// Models an antenna radiation pattern. Multiple platform definitions can
// reference the same antenna pattern.
message AntennaPattern {
  reserved 8, 11 to max;

  // A custom / user-defined antenna radiation pattern.
  message CustomAntennaPattern {
    message SphericalGainValue {
      // A gain value (in decibels) must be provided for each phi and each
      // theta value such that the values in aggregate can be transformed into
      // a table (two dimensional array) with no missing cells (gain values).
      optional double gain_db = 1;

      // Phi is defined as the azimuth angle from the positive x-axis to the
      // orthogonal projection of the point in the x-y plane.
      optional double phi_rad = 2;

      // Theta is the zenith angle from the positive z-axis to the point.
      optional double theta_rad = 3;
    }
    repeated SphericalGainValue gain_value = 1;
  }

  message GaussianAntennaPattern {
    optional double diameter_m = 1;
    optional double efficiency_percent = 2;
    optional double backlobe_gain_db = 3;
  }

  message HelicalAntennaPattern {
    optional double diameter_m = 1;
    optional double efficiency_percent = 2;
    optional double backlobe_gain_db = 3;
    optional double number_of_turns = 4;
    optional double turn_spacing_m = 5;
  }

  message IsotropicAntennaPattern {
  }

  message ParabolicAntennaPattern {
    optional double diameter_m = 1;
    optional double efficiency_percent = 2;
    optional double backlobe_gain_db = 3;
  }

  message SquareHornAntennaPattern {
    optional double diameter_m = 1;
    optional double efficiency_percent = 2;
    optional double backlobe_gain_db = 3;
  }

  message GaussianOpticalAntennaPattern {
    optional double diameter_m = 1;
    optional double efficiency_percent = 2;
    optional double divergence_angle_rad = 3;
    optional double pointing_error_rad = 4;
  }

  message PhasedArrayAntennaPattern {
    optional double design_frequency_hz = 1;
    optional double backlobe_suppression_db = 2;

    message Element {
      // These fields determine the position of each element in the phased
      // array. The center of the array is considered to be at (0, 0). Since
      // this models a planar array, the z-coordinate is 0.0.
      optional double x = 1;
      optional double y = 2;
    }
    repeated Element elements = 3;

    message MinimumVarianceDistortionlessResponseBeamformer {
      optional double beam_variance = 1;
    }
    oneof beamformer {
      MinimumVarianceDistortionlessResponseBeamformer
          minimum_variance_distortionless_response_beamformer = 4;
    }

    message CosineExponentElementFactor {
      optional double cosine_exponent = 1;
      // The element area in meters squared.
      optional double element_area_m2 = 2;
    }
    optional CosineExponentElementFactor cosine_exponent_element_factor = 5;
  }

  // Applies a separate near-field antenna radiation pattern when the other
  // link end is within the near field range (in meters).
  message NearAndFarFieldAntennaPattern {
    optional AntennaPattern near_field_pattern = 1;
    optional AntennaPattern far_field_pattern = 2;
    optional double near_field_range_m = 3;
  }

  oneof pattern_type {
    CustomAntennaPattern custom_pattern = 1;
    GaussianAntennaPattern gaussian_pattern = 2;
    HelicalAntennaPattern helical_pattern = 3;
    IsotropicAntennaPattern isotropic_pattern = 4;
    ParabolicAntennaPattern parabolic_pattern = 5;
    SquareHornAntennaPattern square_horn_pattern = 6;
    GaussianOpticalAntennaPattern gaussian_optical_pattern = 7;
    PhasedArrayAntennaPattern phased_array_pattern = 10;
    NearAndFarFieldAntennaPattern near_and_far_field_pattern = 9;
  }
}
