// Copyright 2023 Aalyria Technologies, Inc., and its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package aalyria.spacetime.api.nbi.v1alpha.resources;

import "api/common/network.proto";
import "api/common/time.proto";
import "api/common/tunnel.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/type/interval.proto";
import "google/type/money.proto";

option java_package = "com.aalyria.spacetime.api.nbi.v1alpha.resources";
option go_package = "aalyria.com/spacetime/api/nbi/v1alpha/resources";

message TunnelConfiguration {
  optional string src_interface_id = 1;
  optional string dst_interface_id = 2;
  optional aalyria.spacetime.api.common.TunnelMethod method = 3;

  // Toporouter will produce a tunnel classifier based on L3 addresses of the
  // provided interface IDs. Optionally, additional classification criteria can
  // be provided here. These values are used as the bottom layer of a template,
  // and then the L3 source/destination spec is overlaid.
  optional aalyria.spacetime.api.common.FlowClassifier classifier = 4;
  reserved 5 to max;
}

// Describes a request to provision a network flow.
message ServiceRequest {
  // Labels the network flow type in the NetOps UI.
  optional string type = 13;  // [(google.api.field_behavior) = OPTIONAL];

  oneof src_type {
    string src_node_id = 2;
    string src_devices_in_region_id = 8;
  }

  oneof dst_type {
    string dst_node_id = 16;
    string dst_devices_in_region_id = 18;
  }


  // By default, packets are classified as belonging to this provisioned flow if
  // their IP source & destination address fields are within the subnet address
  // ranges of the source and destination nodes chosen by toporouter from the
  // source and destination elements specified above. This field allows a client
  // to optionally specify a custom classifier. Custom classifiers defined in
  // terms of nodes will have the node overwritten based on the solution route.
  optional aalyria.spacetime.api.common.FlowClassifier classifier = 9;

  // Requests that the network flow traffic be tunnelled.
  // TODO: Reconsider how to specify these.
  repeated TunnelConfiguration tunnels = 10;

  // The priority field allows the requester to specify the order in which
  // service requests are satisfied relative to other requests.
  // A request will be treated as having a higher priority if the value of this
  // field is greater than that of another service request.
  // Users may want to directly map it to some utility metric of relevance to
  // their network, such as estimated revenue, number of customers served, etc.
  optional double priority = 6;

  message FlowRequirements {
    reserved 4, 7 to max;  // NEXT_ID: 7
    // The time interval over which these requirements are applicable.
    optional aalyria.spacetime.api.common.TimeInterval time_interval = 1;

    // The minimum bandwidth to provision for the flow (optional), in layer 2
    // bits per second.  If the minimum bandwidth cannot be achieved, the flow
    // will not be provisioned at all. If the minimum bandwidth is not
    // specified or is too low, the routing service will assume 100 bps.
    optional double bandwidth_bps_minimum = 2;

    // Requested bandwidth to provision for the flow, in layer 2 bits/sec.
    optional double bandwidth_bps_requested = 3;

    // The maximum allowed end-to-end latency for the flow (optional).
    optional google.protobuf.Duration latency_maximum = 5;

    // Set to true if the network flow being requested may be stored and
    // forwarded later — either at the source node or in transit along the
    // transmission path using store-and-forward protocols.
    //
    // The flow is considered provisioned so long as data accumulating at
    // ‘bandwidth_bps_minimum’ rate across the entirety of the requested time
    // interval or planning horizon may be satisfied by on-path NetworkNodes'
    // Storage.available_bytes.
    optional bool is_disruption_tolerant = 6;
  }
  repeated FlowRequirements requirements = 4;

  // True while the Topology & Routing app observes routes installed that
  // satisfy the bandwidth_bps_minimum capacity of the service request.
  // Apps may watch this field to know when the provision request is satisfied.
  optional bool is_provisioned_now = 5;

  // Chronological intervals during which the service request is considered to
  // be provisioned. When the interval's start timestamp is in the future, the
  // service request is considered to be scheduled such that the route
  // provision will be satisfied beginning at that timestamp.
  repeated google.type.Interval provisioned_intervals = 15;

  message IntentAndIntervals {
    optional string intent_id = 1;
    repeated google.type.Interval interval = 2;
  }

  // An annotation indicating the intents that support this service request over
  // time.
  repeated IntentAndIntervals intent_dependencies = 14;

  // This should be set to true if the requestor wants to allow service
  // fulfillment using partner resources. Defaults to false.
  optional bool allow_partner_resources = 19;

  // The maximum budget allowed for this service request.
  optional google.type.Money cost_per_minute_maximum = 20;

  reserved 1, 3, 7, 11 to 12, 17;
  reserved 21 to max;  // Next IDs.
}
