// Copyright (c) Aalyria Technologies, Inc., and its affiliates.
// Confidential and Proprietary. All rights reserved.

// (-- api-linter: core::0158::request-page-size-field=disabled
//     api-linter: core::0132::request-unknown-fields=disabled
//     api-linter: core::0132::request-parent-required=disabled
//     api-linter: core::0158::request-page-token-field=disabled
//     aip.dev/not-precedent: Legacy; migration planned at go/nbi-api. --)

syntax = "proto2";

package minkowski.nbi.proto;

import "api/common/channel.proto";
import "api/common/control.proto";
import "api/common/coordinates.proto";
import "api/common/platform.proto";
import "api/common/telemetry.proto";
import "api/common/time.proto";
import "api/common/wireless_propagation.proto";
import "api/nbi/antenna_pattern.proto";
import "api/nbi/app_routing.proto";
import "api/nbi/coverage.proto";
import "api/nbi/intent.proto";
import "api/nbi/motion_evaluation.proto";
import "api/nbi/network_element.proto";
import "api/nbi/network_link.proto";
import "api/nbi/scenario_settings.proto";
import "api/nbi/visualization.proto";
import "api/nbi/wireless_interference.proto";
import "google/api/annotations.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/type/interval.proto";

option java_package = "com.aalyria.minkowski.nbi.proto";
option go_package = "aalyria.com/minkowski/api/nbi";

// TODO: can reset field numbers once we move off the Golang server.
enum EntityType {
  ENTITY_TYPE_UNSPECIFIED = 0;
  ANTENNA_PATTERN = 12; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
  BAND_PROFILE = 16; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
  CDPI_STREAM_INFO = 17; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
  STATION_SET = 21; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
  SURFACE_REGION = 22; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
  DRAIN_PROVISION = 20; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
  INTENT = 6; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
  INTERFACE_LINK_REPORT = 5; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
  // protolint:disable:next ENUM_FIELD_NAMES_PREFIX
  INTERFERENCE_CONSTRAINT = 23;
  MOTION_DEFINITION = 4; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
  NETWORK_NODE = 3; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
  NETWORK_STATS_REPORT = 8; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
  PLATFORM_DEFINITION = 1; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
  PROPAGATION_WEATHER = 15; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
  ROUTE_PROVISION = 2; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
  // protolint:disable:next ENUM_FIELD_NAMES_PREFIX
  TRANSCEIVER_LINK_REPORT = 19;
  VISUALIZATION_MODEL = 14; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
  COMPUTED_MOTION = 7; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX

  reserved 24 to max;  // (-- Next ID --)
}

message EntityGroup {
  // Type of the Entity, part of the Entity key.
  optional EntityType type = 1;
  // Name of the SDN component that created and manages this entity.
  // Not part of Entity key.
  optional string app_id = 3;

  // reserved 3 to max;  // Next ID
}

message Entity {
  // The {group.EntityType, id} pair is globally unique.
  optional EntityGroup group = 1;

  // The {EntityType, id} pair is globally unique.
  optional string id = 2;

  // Microseconds since epoch. Updated by the data layer.
  optional int64 commit_timestamp = 3;

  // The user who last modified the entity. Used for debugging only. Control
  // systems should not rely on this field.
  optional string last_modified_by = 22;

  // TODO: can reset field numbers once we move off the Golang server.
  oneof value {
    minkowski.proto.AntennaPattern antenna_pattern = 15;
    minkowski.proto.BandProfile band_profile = 20;
    minkowski.proto.CdpiStreamInfo cdpi_stream_info = 23;
    minkowski.proto.ComputedMotion computed_motion = 10;
    minkowski.proto.StationSet station_set = 27;
    minkowski.proto.SurfaceRegion surface_region = 28;
    minkowski.proto.DrainProvision drain_provision = 26;
    minkowski.proto.Intent intent = 9;
    minkowski.proto.InterfaceLinkReport interface_link_report = 8;
    minkowski.proto.InterferenceConstraint interference_constraint = 29;
    minkowski.proto.MotionDefinition motion_definition = 7;
    minkowski.proto.NetworkNode network_node = 6;
    minkowski.proto.NetworkStatsReport network_stats_report = 11;
    minkowski.proto.PlatformDefinition platform = 4;
    minkowski.proto.RouteProvision route_provision = 5;
    minkowski.proto.TransceiverLinkReport transceiver_link_report = 25;
    minkowski.proto.VisualizationModel visualization_model = 18;
  }

  // reserved 30 to max;  // Next ID
}

service NetOps {
  // Creates a Minkowski Entity using the app: 'Minkowski Netops'.
  rpc CreateEntity(CreateEntityRequest) returns (minkowski.nbi.proto.Entity) {
    option (google.api.http) = {
      post: "/v1/entities/type/{type=*}"
      body: "entity"
    };
  }

  // Updates a Minkowski Entity using the app: 'Minkowski Netops'.
  rpc UpdateEntity(UpdateEntityRequest) returns (minkowski.nbi.proto.Entity) {
    option (google.api.http) = {
      put: "/v1/entities/type/{type=*}/id/{id=*}"
      body: "entity"
    };
  }

  // Lists all specified entities of the selected type.
  // TODO: implement pagination
  rpc ListEntities(ListEntitiesRequest) returns (ListEntitiesResponse) {
    option (google.api.http) = {
      get: "/v1/entities"
    };
  }

  // Lists all specified entities of the selected type over the provided time
  // interval.
  // TODO: implement pagination
  rpc ListEntitiesOverTime(ListEntitiesOverTimeRequest)
      returns (ListEntitiesOverTimeResponse) {
    option (google.api.http) = {
      get: "/v1/entities/over_time"
    };
  }

  // Deletes an Entity.
  rpc DeleteEntity(DeleteEntityRequest) returns (DeleteEntityResponse) {
    option (google.api.http) = {
      delete: "/v1/entities/type/{type=*}/id/{id=*}/commit_timestamp/{commit_timestamp=*}" // protolint:disable:this MAX_LINE_LENGTH
    };
  }

  // RPC returning historical CZML for render in Cesium
  rpc GenerateHistoricalCzml(minkowski.proto.HistoricalCzmlRequest)
      returns (minkowski.proto.HistoricalCzmlResponse) {
    option (google.api.http) = {
      post: "/v1/historicalczml"
      body: "*"
    };
  }

  // Streaming RPC returning CZML necessary to render in Cesium
  rpc CesiumVisualization(minkowski.proto.CesiumVisualizationRequest)
      returns (stream minkowski.proto.CesiumVisualizationResponse) {
    option (google.api.http) = {
      post: "/v1/czml"
      body: "*"
    };
  }

  // Gets a forecast of weather that's pertinent to wireless signal propagation.
  rpc ListWeather(ListWeatherRequest) returns (ListWeatherResponse) {
    option (google.api.http) = {
      get: "/v1/weather"
    };
  }

  // Loads a scenario specified as a
  // com.aalyria.minkowski.proto.ScenarioSettings proto.
  rpc LoadScenario(LoadScenarioRequest) returns (LoadScenarioResponse) {
    option (google.api.http) = {
      post: "/v1/load_scenario"
      body: "scenario_settings"
    };
  }
}

// The supplied Entity does not need to have the EntityType set, it will be
// inferred from the URL.
// The id should be omitted, a unique ID will be generated by the backend.
message CreateEntityRequest {
  optional string type = 1;
  optional minkowski.nbi.proto.Entity entity = 2;
}

// The posted Entity is merged with the existing one. The provided entity should
// only specify the fields to be update, ID and Type should be omited.
message UpdateEntityRequest {
  optional string type = 1;
  optional string id = 2;
  optional minkowski.nbi.proto.Entity entity = 3;
}

message ListEntitiesRequest {
  reserved 2, 6 to max;      // NEXT_ID: 6
  optional string type = 1;  // required.
  // The time interval of the history being requested. If both start and end
  // time are empty, return only the latest entities of the above type.
  // Do not use yet; results may be incomplete.
  // TODO: decide what to do with type.Interval types.
  optional google.type.Interval interval = 3;

  // If set, only return entities that match the filter.
  optional EntityFilter filter = 5;
}

message ListEntitiesResponse {
  repeated minkowski.nbi.proto.Entity entities = 1;
}

message ListEntitiesOverTimeRequest {
  optional string type = 1;  // required.

  // The time range of the history being requested.
  optional minkowski.proto.TimeInterval interval = 2;  // required.

  optional bool compute_cartesian_coordinates = 3;

  // If set, only return entities that match the filter. Empty entities that
  // represent deletes never match filters and will not be returned.
  optional EntityFilter filter = 4;

  // If set, only return entities with an ID in the list.
  repeated string ids = 5;
}

message ListEntitiesOverTimeResponse {
  repeated minkowski.nbi.proto.Entity entities = 1;
}

message EntityFilter {
  // If one or more node IDs are given, only return entities that reference one
  // or more of the node IDs.
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated string references_node = 1;

  // If one or more route provision IDs are given, only return entities that
  // reference one or more of the route provision IDs.
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated string references_route_provision = 2;
}

message DeleteEntityRequest {
  optional string type = 1;
  optional string id = 2;

  // This is a required field. The client must provide the latest known
  // commit_timestamp for the Entity which will be checked against the stored
  // version. If it is out of sync the rpc will fail.
  optional int64 commit_timestamp = 3;  // required. Units are microseconds.
}

message DeleteEntityResponse {
}

message ListWeatherRequest {
  // A region on Earth's surface. Defined by an outer covering of S2 cells at
  // various levels. See http://s2geometry.io/devguide/examples/coverings.
  optional minkowski.proto.S2Cells region = 1;

  // The desired s2 cell resolution to provide in the response.
  // See levels at http://s2geometry.io/resources/s2cell_statistics.
  optional uint32 s2_level = 2 [default = 8];  // range: [0..8]

  // Requests the historical weather forecasts that existed at some time.
  // If omitted, only the latest weather forecast is returned.
  optional google.protobuf.Timestamp start_time = 3;

  // Requests any revisions to the forecasts that occurred over some duration.
  optional google.protobuf.Duration revision_duration = 4;

  // The maximum number of cell forecasts to return.
  optional int32 page_size = 5;

  // A page token, received from a previous `ListWeatherRequest` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListWeatherRequest` must
  // match the call that provided the page token.
  optional string page_token = 6;
}

message ListWeatherResponse {
  repeated minkowski.proto.PropagationWeather weather_forecasts = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  optional string next_page_token = 2;
}

message LoadScenarioRequest {
  // Specifies the entities within the scenario that will be loaded.
  optional minkowski.proto.ScenarioSettings scenario_settings = 1;
}

message LoadScenarioResponse {
}
