// Copyright (c) Aalyria Technologies, Inc., and its affiliates.
// Confidential and Proprietary. All rights reserved.

syntax = "proto2";

package minkowski.proto;

import "api/common/time.proto";

option java_package = "com.aalyria.minkowski.proto";
option go_package = "aalyria.com/minkowski/api/common";

// Next ID : 7
message TransmitterState {
  // Defines the center of the channel in Hz.
  // For RF transceivers, this is the carrier frequency.
  // For optical transceivers, this may be converted to wavelength.
  optional uint64 center_frequency_hz = 5;

  // Specifies the channel bandwidth or spacing configuration, in Hz.
  optional uint64 channel_width_hz = 6;

  // The transmitter power, in Watts.
  optional double transmit_power_watts = 3;

  reserved 1, 2, 4;
}

// Next ID : 6
message ReceiverState {
  // Defines the center of the channel in Hz.
  // For RF transceivers, this is the carrier frequency.
  // For optical transceivers, this may be converted to wavelength.
  optional uint64 center_frequency_hz = 4;

  // Specifies the channel bandwidth or spacing configuration, in Hz.
  optional uint64 channel_width_hz = 5;

  reserved 1, 2, 3;
}

// Defines a TDMA schedule for multiple access radios.
// The schedule is a list of TdmaSlots that will be repeated in order by the
// client radios.
message TdmaSchedule {
  enum ScheduleType {
    // protolint:disable:next ENUM_FIELD_NAMES_PREFIX
    // protolint:disable:next ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH
    UNKNOWN = 0;
    TX_ONLY = 1; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
    RX_ONLY = 2; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
    TX_RX = 3; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
  }
  optional ScheduleType type = 1;

  // Defines a TDMA time slot.
  message TdmaSlot {
    optional Duration duration = 1;

    // Transmits to a remote receiver.
    message TxSlot {
      enum TxSlotType {
        // protolint:disable:next ENUM_FIELD_NAMES_PREFIX
        // protolint:disable:next ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH
        UNKNOWN = 0;
        UNICAST = 1; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
        BEACON = 2; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
        POLLED = 3; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
        CONTENTION = 4; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
      }
      optional TxSlotType type = 1;
      optional string remote_receiver_id = 2;
    }

    // Receives from a remote transmitter.
    message RxSlot {
      enum RxSlotType {
        // protolint:disable:next ENUM_FIELD_NAMES_PREFIX
        // protolint:disable:next ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH
        UNKNOWN = 0;
        UNICAST = 1; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
        BROADCAST = 2; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
      }

      optional RxSlotType type = 1;
      optional string remote_transmitter_id = 2;
    }

    oneof slot_type {
      TxSlot transmit = 2;
      RxSlot receive = 3;
    }
  }

  // The sum of the individual TdmaSlot.duration fields.
  optional Duration schedule_duration = 2;
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated TdmaSlot schedule = 3;
}

message RadioUpdate {
  // A globally unique identifier for this radio config
  optional string radio_config_id = 6;

  // The ID of the interface whose transmitter and receiver settings are being
  // updated.
  optional string interface_id = 4;

  // Configures the transmitter properties.
  optional TransmitterState tx_state = 1;

  // Configures the receiver properties.
  optional ReceiverState rx_state = 2;

  // Configures the TDMA schedule, if applicable.
  optional TdmaSchedule tdma_schedule = 3;

  // A unique string that identifies the adaptive data modem config id selected
  // by the TS-SDN controller.  This field is provided to CDPI Agents to aid in
  // selection of a specific modem profile, SDR firmware image, etc.  Note that
  // this field is typically different from the band profile id.
  optional string modem_config_id = 8;

  // Optional monotonically increasing sequence number per interface.  This is
  // not guaranteed to monontonically increase across different interfaces and
  // is allowed to jump by more than 1.
  optional int64 per_interface_sequence_number = 5;

  reserved 7;
}

message RadioStates {
  // Time at which the state was captured by the network element.
  optional minkowski.proto.DateTime timestamp = 3;

  message RadioState {
    // A globally unique identifier for this radio config
    optional string radio_config_id = 4;
    optional TransmitterState tx_state = 1;
    optional ReceiverState rx_state = 2;
    optional TdmaSchedule tdma_schedule = 3;
  }

  // A mapping from interface_id to radio config id.
  map<string, string> radio_config_id_by_interface_id = 4;

  reserved 1, 2, 5 to max;
}
