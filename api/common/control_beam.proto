// Copyright 2023 Aalyria Technologies, Inc., and its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package aalyria.spacetime.api.common;

import "api/common/coordinates.proto";
import "api/common/network.proto";
import "api/common/platform.proto";
import "api/common/time.proto";
import "google/protobuf/duration.proto";

option java_package = "com.aalyria.spacetime.api.common";
option go_package = "aalyria.com/spacetime/api/common";

// BeamUpdate messages control antenna agents. They are keyed by beam_task_id,
// and the agent consumes ADD/DELETE BeamUpdate messages. For P2MP antennas,
// multiple BeamUpdate messages may be added for the same antenna before a
// removal. For P2P antennas, adding a BeamUpdate will automatically remove
// the prior task/target (because target antenna tasks are exclusive).
message BeamUpdate {
  reserved 13 to max;

  // A globally unique identifier for this task.
  optional string beam_task_id = 3;

  enum Operation {
    UNKNOWN = 0;
    ADD = 1;     // Adds the specified target for this antenna.
    DELETE = 2;  // Deletes a previously added beam task by beam_task_id
  }
  optional Operation operation = 4;

  // The registered identifier for the network interface.
  // TODO: Switch use of this over to 'interface_id'.
  optional string source_interface_id = 1 [deprecated = true];

  // The registered network interface ID for the steerable antenna.
  optional NetworkInterfaceId interface_id = 10;

  // Radio configurations for the source network interface.
  optional RadioConfig radio_config = 11;

  // Uniquely identifies the target of the tasked network interface.
  // This field must always be present for ADD operations and must always be
  // omitted for DELETE operations (ensures backward compatibility).
  // TODO: Switch use of this over to 'target_id'.
  optional string target_interface_id = 2 [deprecated = true];

  // Uniquely identifies the target of the tasked network interface.
  // This field must always be present for ADD operations and must always be
  // omitted for DELETE operations (ensures backward compatibility).
  optional NetworkInterfaceId target_id = 8;

  // Optional information about target position at time-to-enact that may help
  // the agent acquire a link. Note this field is set once for the time-to-enact
  // and will not be updated with the target motion.
  // TODO: s/TargetAcquisitionInfo/TargetPositionInfo
  optional TargetAcquisitionInfo acquisition_info = 5;

  // Optional information about radio signal at target at time-to-enact that
  // may help the agent acquire a link. Note this field is set once for the
  // time-to-enact and will not be updated with target motion.
  optional SignalAcquisitionInfo signal_info = 12;

  // Monotonically increasing sequence number per interface.  This is not
  // guaranteed to monontonically increase across different interfaces and is
  // allowed to jump by more than 1.
  optional int64 per_interface_sequence_number = 7;

  // The timeout to use for enacting this beam update. It describes the maximum
  // delay to scan or steer the beam and acquire the target before an enactment
  // error of DEADLINE_EXCEEDED must be returned.
  optional google.protobuf.Duration establishment_timeout = 9;

  reserved 6;
}

message RadioConfig {
  message Channel {
    // Defines the center of the channel in Hz.
    // For RF transceivers, this is the carrier frequency.
    // For optical transceivers, this may be converted to wavelength.
    optional uint64 center_frequency_hz = 1;

    // Specifies the channel bandwidth or spacing configuration, in Hz.
    optional uint64 channel_width_hz = 2;
  }

  optional Channel tx_channel = 1;
  optional Channel rx_channel = 2;
  // Denotes the adaptive data modem config specified by the TS-SDN controller.
  // This allows the embedded stack to configure a specific modem profile or SDR
  // firmware image. Note that this field is different from band profile id.
  optional string modem_config_id = 3;
}

message SignalAcquisitionInfo {
  // Modeled remote RSL when this beam is pointed at the target.  This field
  // serves as a hint and therefore may not be set (e.g., when the
  // SignalPropagation service is down).
  optional double modeled_power_at_receiver_output_dbw = 1;
}

// This information is intended to aide in initial acquisition of the target
// and is based on propagating the target's motion forward to the time of beam
// enactment. The CDPI does not provide a stream of continuous updates to the
// target's coordinates for tracking purposes.
// TODO: s/TargetAcquisitionInfo/TargetPositionInfo
message TargetAcquisitionInfo {
  reserved 1, 2, 6, 7, 8, 11, 13 to max;

  // Deprecated; clients should migrate to use 'coordinates'.
  optional double longitude = 3 [deprecated = true];
  optional double latitude = 4 [deprecated = true];
  optional double height = 5 [deprecated = true];

  // The target's motion. Any time series motion data provided for interpolation
  // will start at the time of target acquisition, and the duration between the
  // first and last entry in the series is guaranteed to be at least as long as
  // the establishment_timeout.
  optional Motion coordinates = 12;

  // Optionally specifies an ADS-B transponder for locating the target.
  optional AdsbTransponder adsb_transponder = 9;

  // MAC Address for the target's wireless adapter.
  // TODO: Move this to RadioUpdate.
  optional bytes physical_address = 10;
}

message BeamTask {
  reserved 4 to max;

  // The registered identifier for the steerable antenna.
  optional string interface_id = 1;

  // Uniquely identifies the target antenna.
  optional string target_interface_id = 2 [deprecated = true];
  optional NetworkInterfaceId target_id = 3;
}

message BeamStates {
  reserved 1, 2, 5 to max;

  // Time at which the state was captured by the network element.
  optional aalyria.spacetime.api.common.DateTime timestamp = 3;

  // A list of all active beam task ids.
  // A beam task should only be included in this map if the beam's task is still
  // installed. If a phy-layer link outage of greater than 10 seconds occurs,
  // the AirFlow agent should delete the task and send a
  // ControlStateNotification to the network controller (by omitting it from the
  // list).  Outages of 10 seconds or more cause severe network effects
  // including TCP socket closures and termination of VoLTE sessions.
  repeated string beam_task_ids = 4;
}
