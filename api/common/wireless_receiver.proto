// Protobuf messages used to model digital transmitters used in communications.
//
// Copyright (c) Aalyria Technologies, Inc., and its affiliates.
// Confidential and Proprietary. All rights reserved.

syntax = "proto2";

package minkowski.proto;

import "api/common/channel.proto";
import "api/common/wireless.proto";

option java_package = "com.aalyria.minkowski.proto";
option go_package = "aalyria.com/minkowski/api/common";

// Models a set of receive channels.
message RxChannels {
  // The set of supported channel frequencies, in Hz, for this channel set.
  // For RF transceivers, this is the carrier frequency.
  // For optical transceivers, this may be converted to wavelength.
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated int64 center_frequency_hz = 1;
}

// Models a wireless receiver.
message ReceiverDefinition {
  reserved 1, 3 to 8, 12, 13 to max;

  // An optional friendly, human-readable string.
  optional string name = 2;

  // Maps a band profile ID to a set of channels.
  map<string, RxChannels> channel_set = 10;

  // Determines whether or not the SDN performs channel assignment.
  optional ChannelSelectionMethod channel_selection_method = 9;

  // Allows the user to configure an ordered sequence that describes how the
  // wireless transmission is modified or reconfigured starting from the output
  // of the platform antenna that receives the signal.
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated ReceiveSignalProcessor signal_processing_step = 11;
}

// Defines how a wireless signal is modified, reconfigured, or received.
message ReceiveSignalProcessor {
  oneof type {
    Filter filter = 1;
    PhotodetectorDefinition photodetector = 2;
    AmplifierDefinition amplifier = 3;
    MiscGainOrLoss gain_or_loss = 4;
  }
}

// Models a signal filter.
message Filter {
  // This field is optional; it should be omitted for receivers that can
  // automatically reconfigure their frequency to match that of the intended
  // transmitter. Set this only if the filter's frequency is static.
  optional double frequency_hz = 1;

  // The offset to the lower bandwidth limit, in Hz.
  optional double lower_bandwidth_limit_hz = 2;

  // The offset to the upper bandwidth limit, in Hz.
  optional double upper_bandwidth_limit_hz = 3;

  // The thermal noise temperature of the filter, in Kelvin.
  optional double noise_temperature_k = 4;

  message RectangularFilterDefinition {
  }

  message LinearFilterDefinition {
    // The amount of attentunation (rejection) of the output signal, in
    // Decibels, per Hz of difference between the input signal frequency and the
    // filter's configured / design frequency. This should be a positive value.
    optional double rejection_db_per_hz = 1;
  }

  oneof filter_type {
    RectangularFilterDefinition rectangular = 5;
    LinearFilterDefinition linear = 6;
  }
}

// Models a photodetector used in Free-Space Optical Communications (FSOC).
message PhotodetectorDefinition {
  message AvalanchePhotodiodeDefinition {
    optional double field_of_view_rad = 1;
    optional double bandwidth_hz = 2;
    optional double noise_temperature_k = 3;
    optional double efficiency_percent = 4;
    optional double dark_current_amp = 5;
    optional double load_impedance_ohm = 6;
    optional double noise_factor = 7;
    optional double gain_db = 8;
    optional double optical_bandpass_filter_bandwidth_hz = 9;

    // Units for radiance: W * m^-2 * sr^-1 * Hz^-1
    optional double sky_spectral_radiance = 10;

    // Units for emittance: W * m^-2 * Hz^-1
    optional double sun_spectral_radiant_emittance = 11;

    // Must be greater than or equal to 2.99792458E-9 meters and less than
    // or equal to 9.993081933333333E-5 meters to model an optical wavelength.
    optional double wavelength_m = 12;
  }

  message PinPhotodiodeDefinition {
    optional double field_of_view_rad = 1;
    optional double bandwidth_hz = 2;
    optional double noise_temperature_k = 3;
    optional double efficiency_percent = 4;
    optional double dark_current_amp = 5;
    optional double load_impedance_ohm = 6;
    optional double optical_bandpass_filter_bandwidth_hz = 7;

    // Units for radiance: W * m^-2 * sr^-1 * Hz^-1
    optional double sky_spectral_radiance = 8;

    // Units for emittance: W * m^-2 * Hz^-1
    optional double sun_spectral_radiant_emittance = 9;
    
    // Must be greater than or equal to 2.99792458E-9 meters and less than
    // or equal to 9.993081933333333E-5 meters to model an optical wavelength.
    optional double wavelength_m = 10;
  }

  oneof photodetector_type {
    AvalanchePhotodiodeDefinition avalanche_photodiode = 1;
    PinPhotodiodeDefinition pin_photodiode = 2;
  }
}
