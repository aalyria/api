// These messages provide common n-tuple representations for expressing
// locations of points and orientations of axes as well as their derivatives.
//
// Copyright (c) Aalyria Technologies, Inc., and its affiliates.
// Confidential and Proprietary. All rights reserved.

syntax = "proto2";

package minkowski.proto;

import "api/common/time.proto";
import "google/protobuf/timestamp.proto";
import "google/type/interval.proto";

option go_package = "aalyria.com/minkowski/api/common";
option java_package = "com.aalyria.minkowski.proto";

// A set of curvilinear 3 dimensional coordinates relative to the WGS84
// ellipsoid.
message GeodeticWgs84 {
  optional double longitude_deg = 1;
  optional double latitude_deg = 2;
  optional double height_wgs84_m = 3;
}

// A set of curvilinear 3 dimensional coordinates relative to the WGS84
// ellipsoid, but with height specified relative to mean sea level.
message GeodeticMsl {
  optional double longitude_deg = 1;
  optional double latitude_deg = 2;
  optional double height_msl_m = 3;
}

// A collection of S2 cells (see http://s2geometry.io).
message S2Cells {
  repeated uint64 ids = 1;
}

// Translational coordinate.
message Cartesian {
  required double x_m = 1;
  required double y_m = 2;
  required double z_m = 3;
}

// Cartesian is a 3D position vector, and CartesianDot is similarly a set
// of 3D velocity components.
message CartesianDot {
  required double x_mps = 1; // Velocity along x-axis in meters per second.
  required double y_mps = 2; // Velocity along y-axis in meters per second.
  required double z_mps = 3; // Velocity along z-axis in meters per second.
}

// Rotational coordinate.
// Interpreted as the identity if none of the fields are set.
message Quaternion {
  required double w = 1;
  required double x = 2;
  required double y = 3;
  required double z = 4;
}

// Rotational coordinate.
message YawPitchRoll {
  required double yaw_deg = 1;
  required double pitch_deg = 2;
  required double roll_deg = 3;
}

message PointingVector {
  optional double azimuth_deg = 1;
  optional double elevation_deg = 2;
}

// A note about axes defined in terms of quaternion transformations from parent
// reference frames: Let A be a fixed point in space. Let v be A's cartesian
// coordinates in the axes reference frame and w A's cartesian coordinates in
// the parent reference frame. You can use the unit quaternion q below to
// compute
//
//    w = q*v*q'    or    v = q'*w*q
//
// where q' is the conjugate of q and * denotes quaternion multiplication. Note
// that in the formulas above the 3-vectors v and w are treated as quaternions
// whose real part is zero and whose imaginary components correspond to the
// respective components of the 3-vectors. Note also that since q is a unit
// quaternion, q' can be computed simply by negating the three imaginary
// components of q.

message PointAxes {
  optional Cartesian point = 1;

  // The quaternion q satisfies w = q*v*q' where v is a point in the axes'
  // coordinate frame, and w is that same point in the parent reference frame
  // (i.e. the same frame in which the "point" is specified).
  optional Quaternion axes = 2;
}

// A timestamped position and orientation.
message PointAxesTemporal {
  optional Cartesian point = 1;

  // The quaternion q satisfies w = q*v*q' where v is a point in the axes'
  // coordinate frame, and w is that same point in the parent reference frame
  // (i.e. the same frame in which the "point" is specified).
  optional Quaternion axes = 2;

  // TODO: Migrate to Timestamp.
  optional GpsTime gps_time = 4;
  optional google.protobuf.Timestamp time = 5;
}

// A timestamped geodetic coordinate relative to the WGS84 ellipsoid.
message GeodeticWgs84Temporal {
  optional GeodeticWgs84 point = 1;
  optional google.protobuf.Timestamp time = 2;
}

// Enumerates celestial bodies.
enum CentralBody {
  // protolint:disable:next ENUM_FIELD_NAMES_PREFIX
  // protolint:disable:next ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH
  UNKNOWN_CENTRAL_BODY = 0;
  EARTH = 1; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
  MOON = 2; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
}

enum InterpolationMethod {
  // protolint:disable:next ENUM_FIELD_NAMES_PREFIX
  // protolint:disable:next ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH
  UNKNOWN_METHOD = 0;
  LINEAR = 1; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
  LAGRANGE = 2; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
  HERMITIAN = 3; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
}

message PointAxesTemporalInterpolation {
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated PointAxesTemporal locations_orientations_over_time = 1;
  optional InterpolationMethod interpolation_method = 2 [default = LINEAR];
  optional int32 interpolation_degree = 3 [default = 1];
}

message GeodeticWgs84TemporalInterpolation {
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated GeodeticWgs84Temporal locations_over_time = 1;
  optional InterpolationMethod interpolation_method = 2 [default = LINEAR];
  optional int32 interpolation_degree = 3 [default = 1];
}

// https://en.wikipedia.org/wiki/Two-line_element_set
message TwoLineElementSet {
  optional string line1 = 1;
  optional string line2 = 2;
}

// https://en.wikipedia.org/wiki/Orbital_elements#Keplerian_elements
message KeplerianElements {
  // Semimajor axis (distance), in meters.
  optional double semimajor_axis_m = 1;

  // Eccentricity (the shape of the orbital ellipse).
  // This value must be between 0.0 (a circular orbit) and 1.0.
  optional double eccentricity = 2;

  // Inclination, in degrees.
  optional double inclination_deg = 3;

  // Argument of periapsis, in degrees.
  optional double argument_of_periapsis_deg = 4;

  // Right ascension of ascending node, in degrees.
  optional double raan_deg = 5;

  // True anomaly, in degrees.
  optional double true_anomaly_deg = 6;

  // A set of orbital elements is a snapshot, at a particular time, of the orbit
  // of a satellite. This specifies the time at which the snapshot was taken.
  optional DateTime epoch = 7;

  // The celestial body used to fetch gravitational parameters.
  optional CentralBody central_body = 8 [default = EARTH];

  reserved 9 to max;  // next field number
}

// Generic state vector for any satellite positions.  State vectors are used in
// the CCSDS Orbit Parameter Message standard (502.0-B-2), and are typical for
// lunar and other interplanetary mission data, as well as any other generic
// trajectories where TLEs or Keplerian elements are not well suited, e.g.  for
// powered flight, maneuvers, etc.
message StateVector {
  // Time that the state vector was measured.
  required google.protobuf.Timestamp epoch = 1;

  enum CoordinateFrame {
    // The frame should always be known; using this must indicate some error.
    // protolint:disable:next ENUM_FIELD_NAMES_PREFIX
    // protolint:disable:next ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH
    UNKNOWN_FRAME = 0;
    // This indicates the frame used for most E-M Lagrange point orbit studies.
    // It is a natural and convenient way to input L1/L2 orbits.
    // protolint:disable:next ENUM_FIELD_NAMES_PREFIX
    EARTH_MOON_BARYCENTER_SYNODIC_FRAME = 1;
    // Internally, ECEF is used most everywhere else in our software.
    ECEF_FRAME = 2; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
  }
  // Indication of the reference frame for the state vector.
  optional CoordinateFrame coordinate_frame = 2;

  // Three dimensional position and velocity relative to the reference frame.
  required Cartesian position = 3;
  required CartesianDot velocity = 4;

  enum PropagationAlgorithm {
    // Generally, a particular class of algorithm should be specified instead.
    // protolint:disable:next ENUM_FIELD_NAMES_PREFIX
    // protolint:disable:next ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH
    UNSPECIFIED_ALGORITHM = 0;
    // State vector for a vehicle in cislunar space, that should be
    // propagated using a three-body algorithm considering the Earth and
    // Moon's gravity contributions.
    // protolint:disable:next ENUM_FIELD_NAMES_PREFIX
    EARTH_MOON_THREE_BODY_NUMERICAL_ALGORITHM = 1;
  }
  // Indicate the type of propagation algorithm to be used.
  optional PropagationAlgorithm propagation_algorithm = 5;

  // TODO: In the future, if we progress to more complex use cases for deep
  // space, interplanetary, and other types of trajectories, we may want to
  // develop a PropagationParameters message with more details about the
  // relevant force models, constants, and other attributes to be used for
  // accurate propagation, rather than implying the total set simply from the
  // PropagationAlgorithm enum.
}

// A set of curvilinear 3 dimensional coordinates relative to the Mean Lunar
// Radius according to the Report of the IAU/IAG Working Group on Cartographic
// Coordinates and Rotational Elements of the Planets and satellites: 2000.
message SelenographicMlr {
  optional double longitude_deg = 1;
  optional double latitude_deg = 2;
  optional double height_mlr_m = 3;
}

message Motion {
  // The time interval for which this motion specification is applicable.
  //
  // This may be left- or right-unbounded, or unspecified altogether. When
  // the start or end times (or both) are unspecified, and the motion
  // specification does not contain a clear indication of valid timestamps,
  // it is an error if an applicable boundary is required but cannot be
  // inferred from context (e.g., if there is more than one Motion message
  // in a sequence but the start/end time of one cannot be inferred from the
  // end/start time of another).
  optional google.type.Interval interval = 10;

  // This enum is used in various other messages, e.g. Targeting, to reference
  // supported or required motion description formats.
  //
  // The enum values are kept deliberately in sync with the field values in the
  // oneof below, but this is not stricly required in order to read the
  // contents of the oneof.  In this case it suffices to use the
  // protobuf-constructed language-specific support for switch statements
  // (which, for C++ and Java for example, generates a language-appropriate
  // enum to use).
  enum Type {
    // protolint:disable:next ENUM_FIELD_NAMES_PREFIX
    MOTION_UNSPECIFIED = 0;
    GEODETIC_MSL = 7; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
    GEODETIC_WGS84 = 1; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
    ECEF_FIXED = 2; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
    ECEF_INTERPOLATION = 3; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
    // protolint:disable:next ENUM_FIELD_NAMES_PREFIX
    CARTOGRAPHIC_WAYPOINTS = 4;
    TLE = 5; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
    KEPLERIAN_ELEMENTS = 6; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
    STATE_VECTOR = 9; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
    SELENOGRAPHIC_MLR = 8; // protolint:disable:this ENUM_FIELD_NAMES_PREFIX
  }

  oneof type {
    // The implied orientation is EastNorthUp.
    GeodeticMsl geodetic_msl = 7;

    // The implied orientation is EastNorthUp.
    GeodeticWgs84 geodetic_wgs84 = 1;

    // Coordinates are fixed relative to the reference frame.
    PointAxes ecef_fixed = 2;

    // Interpolated time-dynamic coordinates relative to the reference frame.
    PointAxesTemporalInterpolation ecef_interpolation = 3;

    // Interpolated cartographic positions on Earth.
    // The implied orientation of each position is EastNorthUp.
    GeodeticWgs84TemporalInterpolation cartographic_waypoints = 4;

    // Satellite orbital information, expressed as a TLE.
    // See https://en.wikipedia.org/wiki/Two-line_element_set for details.
    // The implied orientation is VVLH as defined here:
    // http://help.agi.com/stk/Content/gator/eq-coordsys.htm
    TwoLineElementSet tle = 5;

    // Satellite orbital information, expressed as Keplerian elements.
    // This coordinate type is only valid for a root platform.
    // http://help.agi.com/stk/Content/gator/eq-coordsys.htm
    KeplerianElements keplerian_elements = 6;

    // Satellite motion as a generic state-vector for deep-space, maneuvers,
    // and other uses outside of traditional 2-body based propagation.
    StateVector state_vector = 9;

    // Coordinates on the surface of the moon.
    SelenographicMlr selenographic_mlr = 8;
  }

  reserved 11 to max;  // next field number
}

message MotionDefinition {
  // A list of `Motion` descriptions over time, sorted by the `interval` of
  // applicability defined within each message.
  repeated Motion motions = 1;
}
