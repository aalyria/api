// Copyright 2023 Aalyria Technologies, Inc., and its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package aalyria.spacetime.api.common;

import "api/common/platform_antenna.proto";

option java_package = "com.aalyria.spacetime.api.common";
option go_package = "aalyria.com/spacetime/api/common";

message AmplifierDefinition {
  message ConstantGainAmplifierDefinition {
    optional double gain_db = 1;
    optional double noise_factor = 2;
    optional double reference_temperature_k = 3;
  }

  message LowNoiseAmplifierDefinition {
    optional double pre_lna_gain_db = 1;
    optional double lna_gain_db = 2;
    optional double post_lna_gain_db = 3;
    optional double noise_factor = 4;
    optional double reference_temperature_k = 5;
  }

  oneof amplifier_type {
    ConstantGainAmplifierDefinition constant_gain = 1;
    LowNoiseAmplifierDefinition low_noise = 2;
  }
}

message MiscGainOrLoss {
  // A name that describes the gain or loss.
  optional string name = 1;

  // The gain (positive values) or loss (negative values), in dB.
  optional double gain_or_loss_db = 2;
}

// Represents a signal, with properties such as a
// center frequency, bandwidth, and polarization.
message Signal {
  // The center frequency (Hz) of the signal.
  optional uint64 center_frequency_hz = 1;

  // The bandwidth (Hz) of the signal.
  optional uint64 bandwidth_hz = 2;

  // The polarization of the signal.
  optional aalyria.spacetime.api.common.Polarization polarization = 3;
}
