// Copyright (c) Aalyria Technologies, Inc., and its affiliates.
// Confidential and Proprietary. All rights reserved.

syntax = "proto2";

package minkowski.proto;

import "google/protobuf/empty.proto";

option java_package = "com.aalyria.minkowski.proto";
option go_package = "aalyria.com/minkowski/api/common";

// Uniquely identifies a network interface.
message NetworkInterfaceId {
  // The unique ID of the node on which the interface is installed.
  optional string node_id = 1;

  // The node-unique interface ID.
  optional string interface_id = 2;
}

// Defines rules for classifying a packet.
// Partially modeled on access/marconi/proto/controller.proto
message PacketClassifier {
  // If high is not specified, the range contains a single value, specified by
  // low. If low and high are both specified, the range is [low, high]; the high
  // value is part of the range. If low == high, it represents the single value
  // of low (same as not providing a high value).
  message ValueRange {
    optional uint32 low = 1;
    optional uint32 high = 2;  // default is same value as "low"
    // If high < low, the range is empty.
    reserved 3 to max;  // Next IDs.
  }

  // Classifier for IPv4 or IPv6 packet headers.
  // See http://go/ip-agnostic
  message IpHeader {
    // This field is represented as an ASCII IPRange.
    optional string src_ip_range = 1;

    // This field is represented as an ASCII IPRange.
    optional string dst_ip_range = 2;

    // IP protocol number.
    optional uint32 protocol = 3;

    reserved 4 to max;  // Next IDs.
  }
  optional IpHeader ip_header = 1;

  // Used to match ports for protocols TCP, UDP, SCTP, etc.
  message GenericLayer4Header {
    // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
    repeated ValueRange source_port = 1;
    // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
    repeated ValueRange destination_port = 2;
    reserved 3 to max;  // Next IDs.
  }
  optional GenericLayer4Header l4_header = 2;

  message EthernetHeader {
    // To match a multicast address set the multicast field. Alternatively, set
    // the desired matching address in the address field.
    oneof destination {
      google.protobuf.Empty multicast = 1;

      // Ethernet address in readable colon separated format. e.g.
      // "1:23:45:67:89:ab" or "01:23:45:67:89:ab"
      string address = 2;
    }
    reserved 3 to max;  // Next IDs.
  }
  optional EthernetHeader ethernet_header = 3;
  reserved 4 to max;  // Next IDs.
}

// A subnet that can be expressed explicitly as an IP range, as a node ID, or as
// an interface ID. In the case of a node ID, the intent compiler will resolve
// the node ID to all the address ranges that the node represents. In the case
// of an interface ID, the intent compiler will resolve the interface ID to an
// address range of only the interface address.
message Subnet {
  oneof subnet {
    string ip_range = 1;
    string node_id = 2;
    // TODO: Remove when we can more cleanly specify a tunnel packet
    // classifier with node ID when multiple subnets are associated with a node.
    NetworkInterfaceId interface_id = 3;
  }
  reserved 4 to max;  // Next IDs.
}

// Classifier for IPv4 or IPv6 flows.
message IpFlowClassifier {
  optional Subnet src = 1;
  optional Subnet dst = 2;

  // IP protocol number.
  optional uint32 protocol = 3;
  reserved 4 to max;  // Next IDs.
}

// Rules for matching a network flow.
message FlowClassifier {
  optional IpFlowClassifier ip_classifier = 1;

  optional PacketClassifier.GenericLayer4Header l4_classifier = 2;

  optional PacketClassifier.EthernetHeader ethernet_classifier = 3;
  reserved 4 to max;  // Next IDs.
}
