// Copyright (c) Aalyria Technologies, Inc., and its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Structured configuration for the reference SBI agent binary.

syntax = "proto3";

package aalyria.spacetime.agent.cmd.agent;

import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";

option go_package = "aalyria.com/spacetime/agent/internal/configpb";

// A strategy for signing a JWT.
message SigningStrategy {
  oneof type {
    // The bytes of a PEM-encoded RSA private key in PKCS #1, ASN.1 DER form or
    // in (unencrypted) PKCS #8, ASN.1 DER form.
    bytes private_key_bytes = 1;
    // The path to a PEM-encoded RSA private key in PKCS #1, ASN.1 DER form or
    // in (unencrypted) PKCS #8, ASN.1 DER form.
    string private_key_file = 2;
  }
}

message AuthStrategy {
  // Jwt is a JSON web token. See https://jwt.io/introduction for more
  // information.
  message Jwt {
    string email = 1;
    string audience = 2;
    string private_key_id = 3;
    SigningStrategy signing_strategy = 4;
  }

  oneof type {
    // The specifications for a JWT that should be generated and signed by the
    // agent.
    Jwt jwt = 1;

    // No authentication options should be used. This is unlikely to work for
    // you.
    google.protobuf.Empty none = 2;
  }
}

message ConnectionParams {
  message TransportSecurity {
    oneof type {
      // Don't use TLS, connect using plain-text HTTP/2.
      google.protobuf.Empty insecure = 1;

      // Use the system certificate pool for TLS.
      google.protobuf.Empty system_cert_pool = 2;
    }
  }

  // BackoffParams mirror the gRPC backoff parameters. See
  // https://github.com/grpc/grpc/blob/master/doc/connection-backoff.md for
  // more details.
  message BackoffParams {
    // The amount of time to backoff after the first connection failure.
    google.protobuf.Duration base_delay = 1;
    // The factor with which to multiply backoffs after a failed retry. Should
    // ideally be greater than 1.
    double multiplier = 2;
    // The factor with which backoffs are randomized.
    double jitter = 3;
    // The upper bound of backoff delay.
    google.protobuf.Duration max_delay = 4;
  }

  // The transport security options to use. Required.
  TransportSecurity transport_security = 1;
  // The "host[:port]" network endpoint the relevant service. Required.
  string endpoint_uri = 2;
  // The strategy to use for authorization. Required.
  AuthStrategy auth_strategy = 3;
  // Parameters to control the gRPC backoff behavior. Defaults to the standard
  // gRPC backoff parameters described in
  // https://github.com/grpc/grpc/blob/master/doc/connection-backoff.md.
  BackoffParams backoff_params = 4;
  // The minimum amount of time to wait for a connection to complete. Defaults
  // to 20 seconds.
  google.protobuf.Duration min_connect_timeout = 5;
  // The amount of time between keepalive pings on an open connection. Can't be
  // lower than 10s. See
  // https://github.com/grpc/proposal/blob/master/A8-client-side-keepalive.md
  google.protobuf.Duration keepalive_period = 6;
}

message SnmpUsmSecurityParameters {
  // AuthProtocol mirrors gosnmp SnmpV3AuthProtocol.
  // See https://github.com/gosnmp/gosnmp/blob/v1.39.0/v3_usm.go#L34 for details.
  enum AuthProtocol {
    AUTH_PROTOCOL_UNSPECIFIED = 0;
    MD5    = 1;
    SHA    = 2;
    SHA224 = 3;
    SHA256 = 4;
    SHA384 = 5;
    SHA512 = 6;
  }

  // PrivProtocol mirrors gosnmp SnmpV3AuthProtocol.
  // See https://github.com/gosnmp/gosnmp/blob/v1.39.0/v3_usm.go#L115 for details.
  enum PrivProtocol {
    PRIV_PROTOCOL_UNSPECIFIED = 0;
    DES     = 1;
    AES     = 2;
    AES192  = 3; // Blumenthal-AES192
    AES256  = 4; // Blumenthal-AES256
    AES192C = 5; // Reeder-AES192
    AES256C = 6; // Reeder-AES256
  }

  string user_name = 1;
  AuthProtocol auth_protocol = 2;
  string auth_passphrase = 3;
  PrivProtocol priv_protocol = 4;
  string priv_passphrase = 5;
}

message SnmpConfig {
  // MsgFlags mirrors gosnmp SnmpV3MessageFlags.
  // See https://github.com/gosnmp/gosnmp/blob/v1.39.0/v3.go#L20 for details.
  enum MsgFlags {
    MSG_FLAGS_UNSPECIFIED = 0;
    NO_AUTH_NO_PRIV       = 1; // No authentication, and no privacy
    AUTH_NO_PRIV          = 2; // Authentication and no privacy
    AUTH_PRIV             = 3; // Authentication and privacy
    REPORTABLE            = 4; // Report PDU must be sent.
  }

  enum Version {
    VERSION_UNSPECIFIED = 0;
    VERSION_1 = 1;
    VERSION_2 = 2;
    VERSION_3 = 3;
  }

  string target_url = 1;
  int32 target_port = 2;
  MsgFlags msg_flags = 3;
  google.protobuf.Duration timeout = 4;
  int32 retries = 5;
  SnmpUsmSecurityParameters security_parameters = 6; // security is only for V3
  Version version = 7;
  string community = 8; // community is not used for V3
  int32 max_oids = 9; // This is needed if driver defaults to max of 0.
}

// SnmpObject can be used to query an SNMP object or, along with a value, to set an object value.
message SnmpObject {
  enum DataType {
    DATA_TYPE_UNSPECIFIED = 0;
    INT = 1;
    STRING = 2;
  }

  message AlertConstraint {
    string interface_id = 1;
    string node_id = 4;
    optional double min = 2; // optional -> pointer type in proto3
    optional double max = 3;
    bool trigger_if_unchanged = 5;
    optional double shift_metric = 6;
  }

  string oid = 1;
  DataType data_type = 2; // TODO : remove this if never used
  string display_name = 3; // can be anything (typically = node name from MIB)
  optional string set_to_value = 4; // present if the operation is to set a value to an OID
  AlertConstraint alert_constraint = 5; // optional constraint that triggers alert
}

// An SDN agent, controlling any number of commandable elements.
message SdnAgent {
  // An external command is a delegate process that handles implementing some
  // aspect of the SBI contract. Exit codes within the range of the canonical
  // gRPC status codes will be transformed (alongside any messages written to
  // standard error) into an appropriate gRPC status.
  //
  // See https://pkg.go.dev/google.golang.org/grpc/codes#Code for the status
  // code integer mappings.
  message ExternalCommand {
    enum ProtoFormat {
      PROTO_FORMAT_UNSPECIFIED = 0;

      // Use the canonical protojson format for proto messages. This is the
      // default. See https://protobuf.dev/programming-guides/proto3/#json
      JSON = 1;
      // Use the canonical text format for proto messages. See
      // https://protobuf.dev/reference/protobuf/textformat-spec/
      //
      // NOTE: Because text format protos are considered overly fragile for
      // interchange purposes, its use isn't recommended in production. Prefer
      // JSON or wire formats outside of development / debugging scenarios. See
      // https://protobuf.dev/programming-guides/dos-donts/#never-use-text-format-messages-for-interchange
      TEXT = 2;
      // Use the binary wire format for proto messages. See
      // https://protobuf.dev/programming-guides/encoding/
      WIRE = 3;
    }

    // The arguments (starting with the executable) to execute.
    repeated string args = 1;
    // The format to write and read proto messages in. Defaults to JSON.
    ProtoFormat proto_format = 2;
  }

  // NetlinkEnactment does not yet require any specialty fields, but may in the future.
  message NetlinkEnactment {
    // The route table number in which destination routes will be managed.
    int32 route_table_id = 1;

    // The Linux PBR priority to use for looking up routes in table
    // |route_table_id| (above).
    int32 route_table_lookup_priority = 2;
  }

  // TODO : SnmpEnactment 
  message SnmpEnactment {
    SnmpConfig config = 1; 
    repeated SnmpObject set_requests = 2;

    // The port on which the metrics will be scrapable as Prometheus metrics
    int32 prometheus_port = 3;
  }

  // An EnactmentDriver is responsible for processing incoming enactments for
  // a given node.
  message EnactmentDriver {
    ConnectionParams connection_params = 1;

    oneof type {
      // Use an external command to process enactments. The command will
      // receive a CreateEntryRequest message over standard input.
      ExternalCommand external_command = 2;

      // Use the Linux-only netlink APIs to process enactments.
      NetlinkEnactment netlink = 3;

      // SNMPv3 for enactments
      SnmpEnactment snmp = 5;

      // Use an agent-specific driver to process enactments.
      google.protobuf.Any dynamic = 4;
    }
  }

  message ExternalCommandTelemetry {
    // How often the metrics will be gathered and reported.
    google.protobuf.Duration collection_period = 1;

    ExternalCommand command = 2;
  }

  message MonitoredInterface {
    // The interface_id as specified by the NetworkNode's NetworkInterface.
    string interface_id = 1;
  }

  message NetlinkTelemetry {
    // How often the metrics will be gathered and reported.
    google.protobuf.Duration collection_period = 2;

    repeated MonitoredInterface monitored_interfaces = 1;
  }

  message SnmpTelemetry {
    SnmpConfig config = 1; 
    repeated SnmpObject get_requests = 2;

    // How often the metrics will be gathered and reported.
    google.protobuf.Duration collection_period = 3;

    // The port on which the metrics will be scrapable as Prometheus metrics
    int32 prometheus_port = 4;
  }

  // A TelemetryDriver is responsible for generating telemetry reports for a
  // given node.
  message TelemetryDriver {
    ConnectionParams connection_params = 1;

    oneof type {
      // Use an external command to handle telemetry updates. The command
      // should write a NetworkStatsReport message in the appropriate format to
      // standard out when executed.
      ExternalCommandTelemetry external_command = 2;

      // Use the Linux-only netlink APIs to gather telemetry.
      NetlinkTelemetry netlink = 3;

      // Use SNMPv3 GET calls to gather telemetry.
      SnmpTelemetry snmp = 5;

      // Use an agent-specific driver to gather telemetry.
      google.protobuf.Any dynamic = 4;
    }
  }

  // The SDN Agent's ID.
  string id = 1;

  EnactmentDriver enactment_driver = 2;
  TelemetryDriver telemetry_driver = 3;
}

// NOTE : I don't know if we need to support traps (from device->Spacetime), but this holds
// the config we'd need for that.
message SnmpTrapConfig {
  string engine_id = 1;

  // url and port are combined to create the address where the trap signals will be sent.
  string url = 2;
  int32 port = 3;

  repeated SnmpUsmSecurityParameters trap_security_parameters = 4;
}
  
message ObservabilityParams {
  // The OTEL gRPC collector endpoint the exporter will connect to. If blank,
  // no exporter will be configured.
  string otel_collector_endpoint = 1;
  // Whether to connect to the OTEL gRPC collector over a plaintext (insecure)
  // connection. Corresponds to the "WithInsecure" exporter option
  // https://pkg.go.dev/go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc#WithInsecure
  bool use_insecure_connection_for_otel_collector = 4;

  // Channelz is a gRPC introspection service that can aid in debugging and
  // understanding gRPC behavior. See
  // https://grpc.io/blog/a-short-introduction-to-channelz/ and
  // https://github.com/grpc/proposal/blob/master/A14-channelz.md for more
  // details.
  //
  // The address to start the channelz server on. If blank, the channelz
  // server will not be started.
  string channelz_address = 2;

  // The address to start Go's standard net/http/pprof server on. If blank, the
  // pprof server will not be started.
  string pprof_address = 3;
}

message AgentParams {
  ObservabilityParams observability_params = 2;
  repeated SdnAgent sdn_agents = 3;
}
